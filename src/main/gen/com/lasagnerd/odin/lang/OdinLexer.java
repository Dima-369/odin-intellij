// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Odin.flex

package com.lasagnerd.odin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.lasagnerd.odin.lang.psi.OdinTypes.*;


public class OdinLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DQ_STRING_STATE = 2;
  public static final int SQ_STRING_STATE = 4;
  public static final int RAW_STRING_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\6\25\2\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\4\36\1\37\1\36\16\40\1\41\5\40"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\40\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\40"+
    "\1\100\1\101\1\102\1\103\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\2\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\20\32"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\2\43\1\45"+
    "\2\43\1\46\2\2\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\55\1\56\1\0\1\57\1\60\1\61\1\0"+
    "\1\62\1\63\3\0\1\64\2\0\1\65\1\66\1\67"+
    "\1\70\1\71\7\32\1\72\5\32\1\73\1\32\1\74"+
    "\15\32\1\75\1\76\1\77\1\43\4\0\1\100\1\101"+
    "\1\102\1\103\1\104\1\0\1\105\1\0\1\105\1\106"+
    "\1\107\1\110\1\111\1\112\13\32\1\113\1\32\1\114"+
    "\1\32\1\115\14\32\1\116\3\0\1\117\1\120\3\32"+
    "\1\121\1\122\4\32\1\123\1\124\11\32\1\125\4\32"+
    "\1\126\2\32\1\127\1\0\2\32\1\130\1\32\1\131"+
    "\3\32\1\132\13\32\1\133\1\134\1\0\7\32\1\135"+
    "\1\136\1\137\3\32\1\140\1\141\1\142\2\32\1\143"+
    "\2\32\1\144\1\32\1\145\1\146\1\32\1\147\2\32"+
    "\1\150\1\151\3\32\1\152\1\32\1\153\1\154\1\32"+
    "\1\155";

  private static int [] zzUnpackAction() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0110\0\u0110\0\u0110\0\u0220\0\u0264\0\u0110\0\u0110\0\u0110"+
    "\0\u02a8\0\u02ec\0\u0110\0\u0330\0\u0374\0\u03b8\0\u03fc\0\u0440"+
    "\0\u0110\0\u0110\0\u0484\0\u04c8\0\u050c\0\u0110\0\u0110\0\u0550"+
    "\0\u0110\0\u0110\0\u0110\0\u0110\0\u0594\0\u05d8\0\u061c\0\u0660"+
    "\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u08c4\0\u0908\0\u094c\0\u0990\0\u0110\0\u09d4\0\u0110\0\u0a18"+
    "\0\u0a5c\0\u0110\0\u0aa0\0\u0ae4\0\u0110\0\u0b28\0\u0b6c\0\u0110"+
    "\0\u0110\0\u0bb0\0\u0110\0\u0bf4\0\u0110\0\u0c38\0\u0110\0\u0110"+
    "\0\u0110\0\u0110\0\u0c7c\0\u0110\0\u0110\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0110\0\u0d8c\0\u0dd0\0\u0e14\0\u0110\0\u0e58\0\u0e9c\0\u0ee0"+
    "\0\u0110\0\u0110\0\u0110\0\u0f24\0\u0f68\0\u0fac\0\u0ff0\0\u1034"+
    "\0\u1078\0\u10bc\0\u1100\0\u0550\0\u1144\0\u1188\0\u11cc\0\u1210"+
    "\0\u1254\0\u0550\0\u1298\0\u0550\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u160c\0\u0110\0\u1650\0\u0110\0\u0110\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u0110\0\u0110\0\u0110\0\u0110\0\u0110\0\u17a4\0\u17e8"+
    "\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u0110\0\u0110\0\u1980"+
    "\0\u19c4\0\u1a08\0\u1a4c\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0"+
    "\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0\0\u0550\0\u1cf4\0\u0550\0\u1d38"+
    "\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58"+
    "\0\u1f9c\0\u1fe0\0\u2024\0\u0110\0\u2068\0\u20ac\0\u20f0\0\u0110"+
    "\0\u0110\0\u2134\0\u2178\0\u21bc\0\u0550\0\u0550\0\u2200\0\u2244"+
    "\0\u2288\0\u22cc\0\u0550\0\u0550\0\u2310\0\u2354\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec\0\u2530\0\u0550\0\u2574\0\u25b8"+
    "\0\u25fc\0\u2640\0\u0550\0\u2684\0\u26c8\0\u0550\0\u270c\0\u2750"+
    "\0\u2794\0\u0550\0\u27d8\0\u0550\0\u281c\0\u2860\0\u28a4\0\u0550"+
    "\0\u28e8\0\u292c\0\u2970\0\u29b4\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4"+
    "\0\u2b08\0\u2b4c\0\u2b90\0\u0550\0\u0550\0\u2bd4\0\u2c18\0\u2c5c"+
    "\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u0550\0\u0550\0\u0550"+
    "\0\u2df4\0\u2e38\0\u2e7c\0\u0550\0\u0550\0\u0550\0\u2ec0\0\u2f04"+
    "\0\u0550\0\u2f48\0\u2f8c\0\u0550\0\u2fd0\0\u0550\0\u0550\0\u3014"+
    "\0\u0550\0\u3058\0\u309c\0\u0550\0\u0550\0\u30e0\0\u3124\0\u3168"+
    "\0\u0550\0\u31ac\0\u0550\0\u0550\0\u31f0\0\u0550";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\2\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\1\26\1\27\3\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\4\40\1\41\1\5\1\42\1\43"+
    "\1\40\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\2\40\1\53\3\40\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\40\1\64\2\40\1\65\1\66"+
    "\1\67\1\70\2\71\2\5\1\71\1\72\35\71\1\73"+
    "\40\71\2\74\2\5\6\74\1\75\30\74\1\76\40\74"+
    "\47\77\1\100\34\77\105\0\1\6\1\101\1\102\102\0"+
    "\2\7\132\0\1\103\61\0\1\104\21\0\1\105\62\0"+
    "\1\106\20\0\1\107\50\0\1\110\32\0\1\111\103\0"+
    "\1\112\71\0\1\113\11\0\1\114\1\115\71\0\1\116"+
    "\77\0\1\117\4\0\1\120\7\0\1\121\72\0\1\122"+
    "\1\0\4\30\10\0\1\123\6\0\1\30\2\0\1\124"+
    "\2\0\1\123\3\0\3\125\3\0\1\126\7\0\1\127"+
    "\26\0\1\122\1\0\4\30\10\0\1\123\6\0\1\30"+
    "\5\0\1\123\3\0\3\125\52\0\1\130\1\131\103\0"+
    "\1\132\103\0\1\133\1\134\73\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\30\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\23\40\1\135\4\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\10\40\1\136\7\40"+
    "\1\137\7\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\1\140\15\40\1\141\11\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\142\3\40\1\143"+
    "\5\40\1\144\10\40\1\145\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\13\40\1\146\1\40\1\147\12\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\1\150"+
    "\15\40\1\151\11\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\5\40\1\152\6\40\1\153\1\154\12\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\1\155"+
    "\27\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\10\40\1\156\5\40\1\157\11\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\20\40\1\160\7\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\1\161\17\40"+
    "\1\162\7\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\4\40\1\163\23\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\22\40\1\164\2\40\1\165\2\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\20\40"+
    "\1\166\7\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\15\40\1\167\3\40\1\170\6\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\7\40\1\171\20\40"+
    "\36\0\1\172\46\0\1\173\34\0\1\174\51\0\2\71"+
    "\2\0\1\71\1\0\35\71\1\0\40\71\5\0\1\175"+
    "\15\0\3\176\13\0\1\177\6\0\2\175\2\0\2\175"+
    "\7\0\1\175\2\0\1\175\1\0\1\175\1\200\1\175"+
    "\1\0\1\201\5\0\2\74\2\0\6\74\1\0\30\74"+
    "\1\0\40\74\12\0\1\175\71\0\47\77\1\0\34\77"+
    "\2\0\1\101\133\0\1\202\103\0\1\203\71\0\1\204"+
    "\114\0\1\205\1\206\51\0\15\117\1\207\66\117\2\120"+
    "\2\0\100\120\23\0\4\210\73\0\1\211\1\0\1\211"+
    "\2\0\4\212\100\0\2\213\102\0\3\214\101\0\4\215"+
    "\7\0\2\215\10\0\6\215\60\0\1\216\103\0\1\217"+
    "\74\0\4\40\7\0\4\40\4\0\1\40\1\0\22\40"+
    "\1\220\5\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\22\40\1\221\5\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\4\40\1\222\23\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\21\40\1\223\6\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\15\40"+
    "\1\224\12\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\5\40\1\225\22\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\21\40\1\226\6\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\15\40\1\227\12\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\21\40"+
    "\1\230\6\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\23\40\1\231\4\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\13\40\1\232\14\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\20\40\1\233\7\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\17\40"+
    "\1\234\10\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\17\40\1\235\2\40\1\236\5\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\13\40\1\237\14\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\22\40"+
    "\1\240\5\40\27\0\4\40\7\0\4\40\4\0\1\241"+
    "\1\0\30\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\2\40\1\242\25\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\16\40\1\243\11\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\22\40\1\244\5\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\20\40"+
    "\1\245\7\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\10\40\1\246\17\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\1\247\22\40\1\250\4\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\10\40\1\251"+
    "\17\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\10\40\1\252\17\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\4\40\1\253\23\40\36\0\1\254\74\0"+
    "\3\175\101\0\4\255\7\0\2\255\10\0\6\255\51\0"+
    "\4\256\7\0\2\256\10\0\6\256\51\0\4\257\7\0"+
    "\2\257\10\0\6\257\26\0\22\117\1\260\61\117\23\0"+
    "\4\210\10\0\1\123\6\0\1\210\5\0\1\123\3\0"+
    "\3\261\44\0\4\212\100\0\4\212\17\0\1\212\11\0"+
    "\3\261\44\0\2\213\21\0\1\213\60\0\3\214\20\0"+
    "\1\214\60\0\4\215\7\0\2\215\6\0\1\215\1\0"+
    "\6\215\51\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\16\40\1\262\11\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\263\1\0\30\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\1\264\27\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\4\40\1\265\15\40\1\266\5\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\22\40"+
    "\1\267\5\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\4\40\1\270\23\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\22\40\1\271\5\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\1\272\27\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\4\40\1\273"+
    "\23\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\14\40\1\274\13\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\13\40\1\275\5\40\1\276\6\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\4\40\1\277"+
    "\23\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\16\40\1\300\11\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\20\40\1\301\7\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\302\1\0\30\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\303\13\40\1\304"+
    "\7\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\12\40\1\305\15\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\2\40\1\306\25\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\23\40\1\307\4\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\23\40\1\310"+
    "\4\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\22\40\1\311\5\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\15\40\1\312\12\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\313\23\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\16\40\1\314"+
    "\11\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\15\40\1\315\12\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\15\40\1\316\12\40\27\0\4\317\7\0"+
    "\2\317\10\0\6\317\51\0\4\201\7\0\2\201\10\0"+
    "\6\201\51\0\4\175\7\0\2\175\10\0\6\175\51\0"+
    "\4\40\7\0\4\40\4\0\1\320\1\0\30\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\21\40\1\321"+
    "\6\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\12\40\1\322\15\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\10\40\1\323\17\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\20\40\1\324\7\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\10\40\1\325"+
    "\17\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\14\40\1\326\13\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\22\40\1\327\5\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\330\23\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\10\40\1\331"+
    "\17\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\20\40\1\332\7\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\10\40\1\333\17\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\10\40\1\334\17\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\13\40\1\335"+
    "\14\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\4\40\1\336\23\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\1\337\27\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\20\40\1\340\7\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\2\40\1\341\25\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\2\40"+
    "\1\342\25\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\21\40\1\343\6\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\15\40\1\344\12\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\6\40\1\345\21\40"+
    "\27\0\4\346\7\0\2\346\10\0\6\346\51\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\2\40\1\347\25\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\4\40"+
    "\1\350\23\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\15\40\1\351\12\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\15\40\1\352\12\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\10\40\1\353\17\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\7\40"+
    "\1\354\20\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\6\40\1\355\21\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\22\40\1\356\5\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\26\40\1\357\1\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\15\40"+
    "\1\360\12\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\21\40\1\361\6\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\22\40\1\362\5\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\6\40\1\363\21\40"+
    "\27\0\4\40\7\0\4\40\4\0\1\40\1\0\15\40"+
    "\1\364\12\40\27\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\22\40\1\365\5\40\27\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\7\40\1\366\20\40\27\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\14\40\1\367\13\40"+
    "\27\0\4\200\7\0\2\200\10\0\6\200\51\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\1\370\27\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\22\40\1\371"+
    "\5\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\23\40\1\372\4\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\2\40\1\373\25\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\2\40\1\374\25\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\20\40\1\375"+
    "\7\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\15\40\1\376\12\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\4\40\1\377\23\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\23\40\1\u0100\4\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\4\40\1\u0101"+
    "\23\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\23\40\1\u0102\4\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\21\40\1\u0103\6\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\u0104\23\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\22\40\1\u0105"+
    "\5\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\16\40\1\u0106\11\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\20\40\1\u0107\7\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\22\40\1\u0108\5\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\22\40\1\u0109"+
    "\5\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\23\40\1\u010a\4\40\27\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\15\40\1\u010b\12\40\27\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\u010c\23\40\27\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\6\40\1\u010d"+
    "\21\40\27\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\7\40\1\u010e\20\40\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12852];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\3\11\2\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\2\11\1\1\4\11\20\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\4\11\1\0\2\11"+
    "\1\1\1\0\1\1\1\11\3\0\1\11\2\0\1\1"+
    "\3\11\36\1\1\11\1\1\2\11\4\0\5\11\1\0"+
    "\1\1\1\0\4\1\2\11\34\1\1\11\3\0\2\11"+
    "\35\1\1\0\26\1\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[270];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
 StringBuffer string = new StringBuffer();

  public OdinLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OdinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 110: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 111: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 112: break;
          case 4:
            { yybegin(DQ_STRING_STATE); string.setLength(0);
            }
          // fall through
          case 113: break;
          case 5:
            { return HASH;
            }
          // fall through
          case 114: break;
          case 6:
            { return DOLLAR;
            }
          // fall through
          case 115: break;
          case 7:
            { return MOD;
            }
          // fall through
          case 116: break;
          case 8:
            { return AND;
            }
          // fall through
          case 117: break;
          case 9:
            { yybegin(SQ_STRING_STATE);
            }
          // fall through
          case 118: break;
          case 10:
            { return LPAREN;
            }
          // fall through
          case 119: break;
          case 11:
            { return RPAREN;
            }
          // fall through
          case 120: break;
          case 12:
            { return STAR;
            }
          // fall through
          case 121: break;
          case 13:
            { return PLUS;
            }
          // fall through
          case 122: break;
          case 14:
            { return COMMA;
            }
          // fall through
          case 123: break;
          case 15:
            { return MINUS;
            }
          // fall through
          case 124: break;
          case 16:
            { return DOT;
            }
          // fall through
          case 125: break;
          case 17:
            { return DIV;
            }
          // fall through
          case 126: break;
          case 18:
            { return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 127: break;
          case 19:
            { return COLON;
            }
          // fall through
          case 128: break;
          case 20:
            { return SEMICOLON;
            }
          // fall through
          case 129: break;
          case 21:
            { return LT;
            }
          // fall through
          case 130: break;
          case 22:
            { return EQ;
            }
          // fall through
          case 131: break;
          case 23:
            { return GT;
            }
          // fall through
          case 132: break;
          case 24:
            { return QUESTION;
            }
          // fall through
          case 133: break;
          case 25:
            { return AT;
            }
          // fall through
          case 134: break;
          case 26:
            { return IDENTIFIER;
            }
          // fall through
          case 135: break;
          case 27:
            { return LBRACKET;
            }
          // fall through
          case 136: break;
          case 28:
            { return RBRACKET;
            }
          // fall through
          case 137: break;
          case 29:
            { return CARET;
            }
          // fall through
          case 138: break;
          case 30:
            { yybegin(RAW_STRING_STATE);
            }
          // fall through
          case 139: break;
          case 31:
            { return LBRACE;
            }
          // fall through
          case 140: break;
          case 32:
            { return PIPE;
            }
          // fall through
          case 141: break;
          case 33:
            { return RBRACE;
            }
          // fall through
          case 142: break;
          case 34:
            { return TILDE;
            }
          // fall through
          case 143: break;
          case 35:
            { 
            }
          // fall through
          case 144: break;
          case 36:
            { yybegin(YYINITIAL); return DQ_STRING_LITERAL;
            }
          // fall through
          case 145: break;
          case 37:
            { yybegin(YYINITIAL); return SQ_STRING_LITERAL;
            }
          // fall through
          case 146: break;
          case 38:
            { yybegin(YYINITIAL); return RAW_STRING_LITERAL;
            }
          // fall through
          case 147: break;
          case 39:
            { return NEQ;
            }
          // fall through
          case 148: break;
          case 40:
            { return REMAINDER;
            }
          // fall through
          case 149: break;
          case 41:
            { return MOD_EQ;
            }
          // fall through
          case 150: break;
          case 42:
            { return ANDAND;
            }
          // fall through
          case 151: break;
          case 43:
            { return AND_EQ;
            }
          // fall through
          case 152: break;
          case 44:
            { return ANDNOT;
            }
          // fall through
          case 153: break;
          case 45:
            { return STAR_EQ;
            }
          // fall through
          case 154: break;
          case 46:
            { return PLUS_EQ;
            }
          // fall through
          case 155: break;
          case 47:
            { return MINUS_EQ;
            }
          // fall through
          case 156: break;
          case 48:
            { return ARROW;
            }
          // fall through
          case 157: break;
          case 49:
            { return RANGE;
            }
          // fall through
          case 158: break;
          case 50:
            { return LINE_COMMENT;
            }
          // fall through
          case 159: break;
          case 51:
            { return DIV_EQ;
            }
          // fall through
          case 160: break;
          case 52:
            { return COMPLEX_INTEGER_DEC_LITERAL;
            }
          // fall through
          case 161: break;
          case 53:
            { return LSHIFT;
            }
          // fall through
          case 162: break;
          case 54:
            { return LTE;
            }
          // fall through
          case 163: break;
          case 55:
            { return EQEQ;
            }
          // fall through
          case 164: break;
          case 56:
            { return GTE;
            }
          // fall through
          case 165: break;
          case 57:
            { return RSHIFT;
            }
          // fall through
          case 166: break;
          case 58:
            { return DO;
            }
          // fall through
          case 167: break;
          case 59:
            { return IF;
            }
          // fall through
          case 168: break;
          case 60:
            { return IN;
            }
          // fall through
          case 169: break;
          case 61:
            { return OR_EQ;
            }
          // fall through
          case 170: break;
          case 62:
            { return OROR;
            }
          // fall through
          case 171: break;
          case 63:
            { return XOR_EQ;
            }
          // fall through
          case 172: break;
          case 64:
            { return REMAINDER_EQ;
            }
          // fall through
          case 173: break;
          case 65:
            { return ANDAND_EQ;
            }
          // fall through
          case 174: break;
          case 66:
            { return TRIPLE_DASH;
            }
          // fall through
          case 175: break;
          case 67:
            { return RANGE_EXCLUSIVE;
            }
          // fall through
          case 176: break;
          case 68:
            { return RANGE_INCLUSIVE;
            }
          // fall through
          case 177: break;
          case 69:
            { return FLOAT_DEC_LITERAL;
            }
          // fall through
          case 178: break;
          case 70:
            { return INTEGER_BIN_LITERAL;
            }
          // fall through
          case 179: break;
          case 71:
            { return INTEGER_OCT_LITERAL;
            }
          // fall through
          case 180: break;
          case 72:
            { return INTEGER_HEX_LITERAL;
            }
          // fall through
          case 181: break;
          case 73:
            { return LSHIFT_EQ;
            }
          // fall through
          case 182: break;
          case 74:
            { return RSHIFT_EQ;
            }
          // fall through
          case 183: break;
          case 75:
            { return FOR;
            }
          // fall through
          case 184: break;
          case 76:
            { return MAP;
            }
          // fall through
          case 185: break;
          case 77:
            { return NIL;
            }
          // fall through
          case 186: break;
          case 78:
            { return OROR_EQ;
            }
          // fall through
          case 187: break;
          case 79:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 188: break;
          case 80:
            { return COMPLEX_FLOAT_LITERAL;
            }
          // fall through
          case 189: break;
          case 81:
            { return CASE;
            }
          // fall through
          case 190: break;
          case 82:
            { return CAST;
            }
          // fall through
          case 191: break;
          case 83:
            { return ELSE;
            }
          // fall through
          case 192: break;
          case 84:
            { return ENUM;
            }
          // fall through
          case 193: break;
          case 85:
            { return PROC;
            }
          // fall through
          case 194: break;
          case 86:
            { return TRUE;
            }
          // fall through
          case 195: break;
          case 87:
            { return WHEN;
            }
          // fall through
          case 196: break;
          case 88:
            { return BREAK;
            }
          // fall through
          case 197: break;
          case 89:
            { return DEFER;
            }
          // fall through
          case 198: break;
          case 90:
            { return FALSE;
            }
          // fall through
          case 199: break;
          case 91:
            { return UNION;
            }
          // fall through
          case 200: break;
          case 92:
            { return USING;
            }
          // fall through
          case 201: break;
          case 93:
            { return IMPORT;
            }
          // fall through
          case 202: break;
          case 94:
            { return MATRIX;
            }
          // fall through
          case 203: break;
          case 95:
            { return NOT_IN;
            }
          // fall through
          case 204: break;
          case 96:
            { return RETURN;
            }
          // fall through
          case 205: break;
          case 97:
            { return STRUCT;
            }
          // fall through
          case 206: break;
          case 98:
            { return SWITCH;
            }
          // fall through
          case 207: break;
          case 99:
            { return BIT_SET;
            }
          // fall through
          case 208: break;
          case 100:
            { return DYNAMIC;
            }
          // fall through
          case 209: break;
          case 101:
            { return FOREIGN;
            }
          // fall through
          case 210: break;
          case 102:
            { return OR_ELSE;
            }
          // fall through
          case 211: break;
          case 103:
            { return PACKAGE;
            }
          // fall through
          case 212: break;
          case 104:
            { return CONTINUE;
            }
          // fall through
          case 213: break;
          case 105:
            { return DISTINCT;
            }
          // fall through
          case 214: break;
          case 106:
            { return AUTO_CAST;
            }
          // fall through
          case 215: break;
          case 107:
            { return OR_RETURN;
            }
          // fall through
          case 216: break;
          case 108:
            { return TRANSMUTE;
            }
          // fall through
          case 217: break;
          case 109:
            { return FALLTHROUGH;
            }
          // fall through
          case 218: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
