// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Odin.flex

package com.lasagnerd.odin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.lasagnerd.odin.lang.psi.OdinTokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.lasagnerd.odin.lang.psi.OdinTypes.*;


public class OdinLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DQ_STRING_STATE = 2;
  public static final int SQ_STRING_STATE = 4;
  public static final int NLSEMI_STATE = 6;
  public static final int NEXT_LINE = 8;
  public static final int BLOCK_COMMENT_STATE = 10;
  public static final int FLOAT_LITERAL_STATE = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\4\u2f00\4\u3000\31\u1f00\1\u0100\1\u3100\1\u3200\1\u0100"+
    "\1\u3300\1\u3400\1\u3500\1\u3600\1\u1f00\1\u3700\1\u3800\1\u3900"+
    "\1\u3a00\1\u0100\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000"+
    "\1\u4100\1\u1f00\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u4d00\1\u1f00\1\u4e00"+
    "\1\u4f00\1\u5000\1\u1f00\3\u0100\1\u5100\1\u5200\1\u5300\12\u1f00"+
    "\4\u0100\1\u5400\17\u1f00\2\u0100\1\u5500\41\u1f00\2\u0100\1\u5600"+
    "\1\u5700\2\u1f00\1\u5800\1\u5900\27\u0100\1\u5a00\2\u0100\1\u5b00"+
    "\45\u1f00\1\u0100\1\u5c00\1\u5d00\11\u1f00\1\u5e00\27\u1f00\1\u5f00"+
    "\1\u6000\1\u6100\1\u6200\11\u1f00\1\u6300\1\u6400\5\u1f00\1\u6500"+
    "\1\u6600\4\u1f00\1\u6700\21\u1f00\246\u0100\1\u6800\20\u0100\1\u6900"+
    "\1\u6a00\25\u0100\1\u6b00\34\u0100\1\u6c00\14\u1f00\2\u0100\1\u6d00"+
    "\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\2\22\0\1\1"+
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\6\25\2\26\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\4\36\1\37\1\36\16\40\1\41\5\40"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61"+
    "\1\62\1\63\1\64\1\65\1\66\1\67\1\40\1\70"+
    "\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\40"+
    "\1\100\1\101\1\102\1\103\53\0\1\40\12\0\1\40"+
    "\4\0\1\40\5\0\27\40\1\0\37\40\1\0\u01ca\40"+
    "\4\0\14\40\16\0\5\40\7\0\1\40\1\0\1\40"+
    "\201\0\5\40\1\0\2\40\2\0\4\40\1\0\1\40"+
    "\6\0\1\40\1\0\3\40\1\0\1\40\1\0\24\40"+
    "\1\0\123\40\1\0\213\40\10\0\246\40\1\0\46\40"+
    "\2\0\1\40\6\0\51\40\107\0\33\40\4\0\4\40"+
    "\55\0\53\40\43\0\2\40\1\0\143\40\1\0\1\40"+
    "\17\0\2\40\7\0\2\40\12\0\3\40\2\0\1\40"+
    "\20\0\1\40\1\0\36\40\35\0\131\40\13\0\1\40"+
    "\30\0\41\40\11\0\2\40\4\0\1\40\5\0\26\40"+
    "\4\0\1\40\11\0\1\40\3\0\1\40\27\0\31\40"+
    "\7\0\13\40\65\0\25\40\1\0\10\40\106\0\66\40"+
    "\3\0\1\40\22\0\1\40\7\0\12\40\17\0\20\40"+
    "\4\0\10\40\2\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\1\40\3\0\4\40\3\0\1\40\20\0\1\40"+
    "\15\0\2\40\1\0\3\40\16\0\2\40\12\0\1\40"+
    "\10\0\6\40\4\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\2\40\1\0\2\40\1\0\2\40\37\0\4\40"+
    "\1\0\1\40\23\0\3\40\20\0\11\40\1\0\3\40"+
    "\1\0\26\40\1\0\7\40\1\0\2\40\1\0\5\40"+
    "\3\0\1\40\22\0\1\40\17\0\2\40\27\0\1\40"+
    "\13\0\10\40\2\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\2\40\1\0\5\40\3\0\1\40\36\0\2\40"+
    "\1\0\3\40\17\0\1\40\21\0\1\40\1\0\6\40"+
    "\3\0\3\40\1\0\4\40\3\0\2\40\1\0\1\40"+
    "\1\0\2\40\3\0\2\40\3\0\3\40\3\0\14\40"+
    "\26\0\1\40\64\0\10\40\1\0\3\40\1\0\27\40"+
    "\1\0\20\40\3\0\1\40\32\0\3\40\5\0\2\40"+
    "\36\0\1\40\4\0\10\40\1\0\3\40\1\0\27\40"+
    "\1\0\12\40\1\0\5\40\3\0\1\40\40\0\1\40"+
    "\1\0\2\40\17\0\2\40\22\0\10\40\1\0\3\40"+
    "\1\0\51\40\2\0\1\40\20\0\1\40\5\0\3\40"+
    "\10\0\3\40\30\0\6\40\5\0\22\40\3\0\30\40"+
    "\1\0\11\40\1\0\1\40\2\0\7\40\72\0\60\40"+
    "\1\0\2\40\14\0\7\40\72\0\2\40\1\0\1\40"+
    "\1\0\5\40\1\0\30\40\1\0\1\40\1\0\12\40"+
    "\1\0\2\40\11\0\1\40\2\0\5\40\1\0\1\40"+
    "\25\0\4\40\40\0\1\40\77\0\10\40\1\0\44\40"+
    "\33\0\5\40\163\0\53\40\24\0\1\40\20\0\6\40"+
    "\4\0\4\40\3\0\1\40\3\0\2\40\7\0\3\40"+
    "\4\0\15\40\14\0\1\40\21\0\46\40\1\0\1\40"+
    "\5\0\1\40\2\0\53\40\1\0\115\40\1\0\4\40"+
    "\2\0\7\40\1\0\1\40\1\0\4\40\2\0\51\40"+
    "\1\0\4\40\2\0\41\40\1\0\4\40\2\0\7\40"+
    "\1\0\1\40\1\0\4\40\2\0\17\40\1\0\71\40"+
    "\1\0\4\40\2\0\103\40\45\0\20\40\20\0\126\40"+
    "\2\0\6\40\3\0\u016c\40\2\0\21\40\1\0\32\40"+
    "\5\0\113\40\6\0\10\40\7\0\15\40\1\0\4\40"+
    "\16\0\22\40\16\0\22\40\16\0\15\40\1\0\3\40"+
    "\17\0\64\40\43\0\1\40\4\0\1\40\103\0\131\40"+
    "\7\0\5\40\2\0\42\40\1\0\1\40\5\0\106\40"+
    "\12\0\37\40\61\0\36\40\2\0\5\40\13\0\54\40"+
    "\4\0\32\40\66\0\27\40\11\0\65\40\122\0\1\40"+
    "\135\0\57\40\21\0\7\40\67\0\36\40\15\0\2\40"+
    "\12\0\54\40\32\0\44\40\51\0\3\40\12\0\44\40"+
    "\2\0\11\40\7\0\53\40\2\0\3\40\51\0\4\40"+
    "\1\0\6\40\1\0\2\40\3\0\1\40\5\0\300\40"+
    "\100\0\26\40\2\0\6\40\2\0\46\40\2\0\6\40"+
    "\2\0\10\40\1\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\37\40\2\0\65\40\1\0\7\40\1\0\1\40"+
    "\3\0\3\40\1\0\7\40\3\0\4\40\2\0\6\40"+
    "\4\0\15\40\5\0\3\40\1\0\7\40\164\0\1\40"+
    "\15\0\1\40\20\0\15\40\145\0\1\40\4\0\1\40"+
    "\2\0\12\40\1\0\1\40\3\0\5\40\6\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\4\40\1\0\13\40"+
    "\2\0\4\40\5\0\5\40\4\0\1\40\64\0\2\40"+
    "\u017b\0\57\40\1\0\57\40\1\0\205\40\6\0\4\40"+
    "\3\0\2\40\14\0\46\40\1\0\1\40\5\0\1\40"+
    "\2\0\70\40\7\0\1\40\20\0\27\40\11\0\7\40"+
    "\1\0\7\40\1\0\7\40\1\0\7\40\1\0\7\40"+
    "\1\0\7\40\1\0\7\40\1\0\7\40\120\0\1\40"+
    "\325\0\2\40\52\0\5\40\5\0\2\40\4\0\126\40"+
    "\6\0\3\40\1\0\132\40\1\0\4\40\5\0\53\40"+
    "\1\0\136\40\21\0\33\40\65\0\306\40\112\0\360\40"+
    "\20\0\215\40\103\0\56\40\2\0\15\40\3\0\20\40"+
    "\12\0\2\40\24\0\57\40\20\0\37\40\2\0\106\40"+
    "\61\0\11\40\2\0\147\40\2\0\65\40\2\0\5\40"+
    "\60\0\13\40\1\0\3\40\1\0\4\40\1\0\27\40"+
    "\35\0\64\40\16\0\62\40\76\0\6\40\3\0\1\40"+
    "\1\0\2\40\13\0\34\40\12\0\27\40\31\0\35\40"+
    "\7\0\57\40\34\0\1\40\20\0\5\40\1\0\12\40"+
    "\12\0\5\40\1\0\51\40\27\0\3\40\1\0\10\40"+
    "\24\0\27\40\3\0\1\40\3\0\62\40\1\0\1\40"+
    "\3\0\2\40\2\0\5\40\2\0\1\40\1\0\1\40"+
    "\30\0\3\40\2\0\13\40\7\0\3\40\14\0\6\40"+
    "\2\0\6\40\2\0\6\40\11\0\7\40\1\0\7\40"+
    "\1\0\53\40\1\0\14\40\10\0\163\40\35\0\244\40"+
    "\14\0\27\40\4\0\61\40\u0204\0\156\40\2\0\152\40"+
    "\46\0\7\40\14\0\5\40\5\0\1\40\1\0\12\40"+
    "\1\0\15\40\1\0\5\40\1\0\1\40\1\0\2\40"+
    "\1\0\2\40\1\0\154\40\41\0\153\40\22\0\100\40"+
    "\2\0\66\40\50\0\14\40\164\0\5\40\1\0\207\40"+
    "\44\0\32\40\6\0\32\40\13\0\131\40\3\0\6\40"+
    "\2\0\6\40\2\0\6\40\2\0\3\40\43\0\14\40"+
    "\1\0\32\40\1\0\23\40\1\0\2\40\1\0\17\40"+
    "\2\0\16\40\42\0\173\40\205\0\35\40\3\0\61\40"+
    "\57\0\40\40\15\0\24\40\1\0\10\40\6\0\46\40"+
    "\12\0\36\40\2\0\44\40\4\0\10\40\60\0\236\40"+
    "\22\0\44\40\4\0\44\40\4\0\50\40\10\0\64\40"+
    "\234\0\67\40\11\0\26\40\12\0\10\40\230\0\6\40"+
    "\2\0\1\40\1\0\54\40\1\0\2\40\3\0\1\40"+
    "\2\0\27\40\12\0\27\40\11\0\37\40\101\0\23\40"+
    "\1\0\2\40\12\0\26\40\12\0\32\40\106\0\70\40"+
    "\6\0\2\40\100\0\1\40\17\0\4\40\1\0\3\40"+
    "\1\0\35\40\52\0\35\40\3\0\35\40\43\0\10\40"+
    "\1\0\34\40\33\0\66\40\12\0\26\40\12\0\23\40"+
    "\15\0\22\40\156\0\111\40\67\0\63\40\15\0\63\40"+
    "\15\0\44\40\334\0\35\40\12\0\1\40\10\0\26\40"+
    "\232\0\27\40\14\0\65\40\113\0\55\40\40\0\31\40"+
    "\32\0\44\40\35\0\1\40\13\0\43\40\3\0\1\40"+
    "\14\0\60\40\16\0\4\40\25\0\1\40\1\0\1\40"+
    "\43\0\22\40\1\0\31\40\124\0\7\40\1\0\1\40"+
    "\1\0\4\40\1\0\17\40\1\0\12\40\7\0\57\40"+
    "\46\0\10\40\2\0\2\40\2\0\26\40\1\0\7\40"+
    "\1\0\2\40\1\0\5\40\3\0\1\40\22\0\1\40"+
    "\14\0\5\40\236\0\65\40\22\0\4\40\24\0\1\40"+
    "\40\0\60\40\24\0\2\40\1\0\1\40\270\0\57\40"+
    "\51\0\4\40\44\0\60\40\24\0\1\40\73\0\53\40"+
    "\15\0\1\40\107\0\33\40\345\0\54\40\164\0\100\40"+
    "\37\0\1\40\240\0\10\40\2\0\47\40\20\0\1\40"+
    "\1\0\1\40\34\0\1\40\12\0\50\40\7\0\1\40"+
    "\25\0\1\40\13\0\56\40\23\0\1\40\42\0\71\40"+
    "\7\0\11\40\1\0\45\40\21\0\1\40\61\0\36\40"+
    "\160\0\7\40\1\0\2\40\1\0\46\40\25\0\1\40"+
    "\31\0\6\40\1\0\2\40\1\0\40\40\16\0\1\40"+
    "\u0147\0\23\40\15\0\232\40\346\0\304\40\274\0\57\40"+
    "\321\0\107\40\271\0\71\40\7\0\37\40\161\0\36\40"+
    "\22\0\60\40\20\0\4\40\37\0\25\40\5\0\23\40"+
    "\260\0\100\40\200\0\113\40\5\0\1\40\102\0\15\40"+
    "\100\0\2\40\1\0\1\40\34\0\370\40\10\0\363\40"+
    "\15\0\37\40\61\0\3\40\21\0\4\40\10\0\u018c\40"+
    "\4\0\153\40\5\0\15\40\3\0\11\40\7\0\12\40"+
    "\146\0\125\40\1\0\107\40\1\0\2\40\2\0\1\40"+
    "\2\0\2\40\2\0\4\40\1\0\14\40\1\0\1\40"+
    "\1\0\7\40\1\0\101\40\1\0\4\40\2\0\10\40"+
    "\1\0\7\40\1\0\34\40\1\0\4\40\1\0\5\40"+
    "\1\0\1\40\3\0\7\40\1\0\u0154\40\2\0\31\40"+
    "\1\0\31\40\1\0\37\40\1\0\31\40\1\0\37\40"+
    "\1\0\31\40\1\0\37\40\1\0\31\40\1\0\37\40"+
    "\1\0\31\40\1\0\10\40\64\0\55\40\12\0\7\40"+
    "\20\0\1\40\u0171\0\54\40\24\0\305\40\73\0\104\40"+
    "\7\0\1\40\264\0\4\40\1\0\33\40\1\0\2\40"+
    "\1\0\1\40\2\0\1\40\1\0\12\40\1\0\4\40"+
    "\1\0\1\40\1\0\1\40\6\0\1\40\4\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\3\40\1\0\2\40"+
    "\1\0\1\40\2\0\1\40\1\0\1\40\1\0\1\40"+
    "\1\0\1\40\1\0\1\40\1\0\2\40\1\0\1\40"+
    "\2\0\4\40\1\0\7\40\1\0\4\40\1\0\4\40"+
    "\1\0\1\40\1\0\12\40\1\0\21\40\5\0\3\40"+
    "\1\0\5\40\1\0\21\40\104\0\327\40\51\0\65\40"+
    "\13\0\336\40\2\0\u0182\40\16\0\u0131\40\37\0\36\40"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[28160];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\1\20\33\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\1\46\1\44\1\47\1\50\1\47\1\51\1\2\1\52"+
    "\2\51\1\53\1\54\2\53\1\55\1\56\1\57\1\60"+
    "\1\61\1\62\1\63\1\64\1\0\1\65\1\66\1\67"+
    "\1\70\1\71\1\72\1\73\1\74\4\0\1\75\1\0"+
    "\1\76\1\77\1\100\1\101\1\102\1\0\1\103\7\33"+
    "\1\104\5\33\1\105\1\33\1\106\15\33\1\107\1\110"+
    "\1\111\1\44\4\0\1\47\5\0\1\112\2\0\1\113"+
    "\1\114\1\115\1\116\1\117\1\120\1\121\1\122\1\70"+
    "\1\123\1\0\1\70\1\124\1\125\1\126\1\127\1\130"+
    "\13\33\1\131\1\33\1\132\1\33\1\133\14\33\1\134"+
    "\6\0\1\52\3\33\1\135\1\136\4\33\1\137\1\140"+
    "\11\33\1\141\4\33\1\142\2\33\1\143\1\33\2\0"+
    "\2\33\1\144\1\33\1\145\3\33\1\146\13\33\1\147"+
    "\1\150\1\151\2\0\7\33\1\152\1\153\1\154\3\33"+
    "\1\155\1\156\1\157\2\33\1\160\2\33\1\161\1\33"+
    "\1\162\1\163\1\33\1\164\2\33\1\165\1\166\3\33"+
    "\1\167\1\33\1\170\1\171\1\33\1\172";

  private static int [] zzUnpackAction() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u01dc\0\u01dc\0\u01dc\0\u02ec\0\u0330"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u0374\0\u03b8\0\u01dc\0\u03fc\0\u0440"+
    "\0\u0484\0\u04c8\0\u050c\0\u01dc\0\u01dc\0\u0550\0\u0594\0\u05d8"+
    "\0\u01dc\0\u01dc\0\u061c\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u0660"+
    "\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c\0\u0880"+
    "\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0"+
    "\0\u01dc\0\u0ae4\0\u01dc\0\u0b28\0\u0b6c\0\u01dc\0\u01dc\0\u0bb0"+
    "\0\u0bf4\0\u01dc\0\u0c38\0\u01dc\0\u0c7c\0\u0cc0\0\u0d04\0\u0d48"+
    "\0\u0d8c\0\u0dd0\0\u0e14\0\u0e58\0\u01dc\0\u0e9c\0\u01dc\0\u0ee0"+
    "\0\u01dc\0\u0f24\0\u01dc\0\u01dc\0\u0f68\0\u01dc\0\u01dc\0\u0fac"+
    "\0\u0ff0\0\u01dc\0\u01dc\0\u1034\0\u01dc\0\u1078\0\u10bc\0\u1100"+
    "\0\u1144\0\u01dc\0\u1188\0\u11cc\0\u01dc\0\u01dc\0\u01dc\0\u1210"+
    "\0\u0660\0\u01dc\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u061c\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u061c"+
    "\0\u1584\0\u061c\0\u15c8\0\u160c\0\u1650\0\u1694\0\u16d8\0\u171c"+
    "\0\u1760\0\u17a4\0\u17e8\0\u182c\0\u1870\0\u18b4\0\u18f8\0\u01dc"+
    "\0\u193c\0\u01dc\0\u01dc\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u01dc"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u01dc\0\u1be4\0\u1c28"+
    "\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc\0\u01dc"+
    "\0\u01dc\0\u01dc\0\u1c6c\0\u1cb0\0\u1100\0\u1144\0\u1cf4\0\u01dc"+
    "\0\u01dc\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04\0\u1e48\0\u1e8c\0\u1ed0"+
    "\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u061c\0\u20ac"+
    "\0\u061c\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\u2244\0\u2288"+
    "\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u01dc\0\u2420\0\u2464"+
    "\0\u24a8\0\u24ec\0\u2530\0\u2574\0\u01dc\0\u25b8\0\u25fc\0\u2640"+
    "\0\u061c\0\u061c\0\u2684\0\u26c8\0\u270c\0\u2750\0\u061c\0\u061c"+
    "\0\u2794\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970"+
    "\0\u29b4\0\u061c\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u061c\0\u2b08"+
    "\0\u2b4c\0\u061c\0\u2b90\0\u2bd4\0\u2c18\0\u2c5c\0\u2ca0\0\u061c"+
    "\0\u2ce4\0\u061c\0\u2d28\0\u2d6c\0\u2db0\0\u061c\0\u2df4\0\u2e38"+
    "\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014\0\u3058"+
    "\0\u309c\0\u061c\0\u061c\0\u061c\0\u30e0\0\u3124\0\u3168\0\u31ac"+
    "\0\u31f0\0\u3234\0\u3278\0\u32bc\0\u3300\0\u061c\0\u061c\0\u061c"+
    "\0\u3344\0\u3388\0\u33cc\0\u061c\0\u061c\0\u061c\0\u3410\0\u3454"+
    "\0\u061c\0\u3498\0\u34dc\0\u061c\0\u3520\0\u061c\0\u061c\0\u3564"+
    "\0\u061c\0\u35a8\0\u35ec\0\u061c\0\u061c\0\u3630\0\u3674\0\u36b8"+
    "\0\u061c\0\u36fc\0\u061c\0\u061c\0\u3740\0\u061c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\11\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\3\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\4\43\1\44\1\45\1\46"+
    "\1\47\1\43\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\2\43\1\57\3\43\1\60\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\43\1\70\2\43\1\71"+
    "\1\72\1\73\1\74\2\75\1\76\2\75\1\77\35\75"+
    "\1\100\40\75\2\101\1\76\7\101\1\102\30\101\1\103"+
    "\40\101\1\104\1\105\1\106\7\104\1\107\7\104\1\110"+
    "\61\104\1\10\1\105\1\76\101\10\2\111\1\112\12\111"+
    "\1\113\4\111\1\114\61\111\104\10\105\0\1\11\1\0"+
    "\1\11\102\0\1\12\133\0\1\115\61\0\1\116\21\0"+
    "\1\117\62\0\1\120\20\0\1\121\50\0\1\122\32\0"+
    "\1\123\103\0\1\124\71\0\1\125\11\0\1\126\1\127"+
    "\71\0\1\130\1\0\4\131\5\0\1\132\64\0\1\133"+
    "\4\0\1\134\7\0\1\135\72\0\1\136\1\0\4\33"+
    "\10\0\1\137\6\0\1\33\2\0\1\140\2\0\1\137"+
    "\2\0\1\141\3\142\3\0\1\143\7\0\1\141\26\0"+
    "\1\136\1\0\4\33\10\0\1\137\6\0\1\33\5\0"+
    "\1\137\3\0\3\142\52\0\1\144\1\145\103\0\1\146"+
    "\103\0\1\147\1\150\73\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\30\43\4\0\47\151\1\152\34\151\23\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\23\43\1\153"+
    "\4\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\10\43\1\154\7\43\1\155\7\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\1\156\15\43\1\157\11\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\4\43"+
    "\1\160\3\43\1\161\5\43\1\162\10\43\1\163\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\13\43\1\164"+
    "\1\43\1\165\12\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\1\166\15\43\1\167\11\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\5\43\1\170\6\43"+
    "\1\171\1\172\12\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\1\173\27\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\10\43\1\174\5\43\1\175\11\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\20\43"+
    "\1\176\7\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\1\177\17\43\1\200\7\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\4\43\1\201\23\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\22\43\1\202"+
    "\2\43\1\203\2\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\20\43\1\204\7\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\15\43\1\205\3\43\1\206"+
    "\6\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\7\43\1\207\20\43\36\0\1\210\46\0\1\211\34\0"+
    "\1\212\51\0\2\75\1\0\2\75\1\0\35\75\1\0"+
    "\40\75\5\0\1\213\15\0\3\214\13\0\1\215\6\0"+
    "\2\213\2\0\2\213\7\0\1\213\2\0\1\213\1\0"+
    "\1\213\1\216\1\213\1\0\1\217\5\0\2\101\1\0"+
    "\7\101\1\0\30\101\1\0\40\101\12\0\1\220\10\0"+
    "\3\221\13\0\1\222\6\0\2\220\2\0\2\220\7\0"+
    "\1\220\2\0\1\220\1\0\1\220\1\223\1\220\1\0"+
    "\1\224\6\0\1\105\104\0\1\106\131\0\1\225\70\0"+
    "\1\226\4\0\1\134\61\0\2\111\1\0\12\111\1\227"+
    "\4\111\1\230\61\111\2\0\1\112\101\0\2\111\1\0"+
    "\17\111\1\231\63\111\1\0\12\111\1\232\66\111\32\0"+
    "\1\233\103\0\1\234\103\0\1\235\71\0\1\236\114\0"+
    "\1\237\1\240\74\0\4\131\10\0\1\137\6\0\1\131"+
    "\5\0\1\137\3\0\3\241\21\0\2\134\1\0\101\134"+
    "\21\242\1\0\1\242\4\131\55\242\16\0\1\243\1\0"+
    "\1\243\2\0\4\244\100\0\2\245\21\0\1\245\60\0"+
    "\4\246\7\0\2\246\6\0\1\246\1\0\6\246\51\0"+
    "\3\247\110\0\1\250\103\0\1\251\74\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\22\43\1\252\5\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\22\43\1\253"+
    "\5\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\4\43\1\254\23\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\21\43\1\255\6\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\15\43\1\256\12\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\5\43\1\257"+
    "\22\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\21\43\1\260\6\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\15\43\1\261\12\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\21\43\1\262\6\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\23\43\1\263"+
    "\4\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\13\43\1\264\14\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\20\43\1\265\7\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\17\43\1\266\10\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\17\43\1\267"+
    "\2\43\1\270\5\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\13\43\1\271\14\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\22\43\1\272\5\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\273\1\0\30\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\2\43\1\274"+
    "\25\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\16\43\1\275\11\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\22\43\1\276\5\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\20\43\1\277\7\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\10\43\1\300"+
    "\17\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\1\301\22\43\1\302\4\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\10\43\1\303\17\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\10\43\1\304\17\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\4\43"+
    "\1\305\23\43\36\0\1\306\74\0\3\213\101\0\4\307"+
    "\7\0\2\307\10\0\6\307\51\0\4\310\7\0\2\310"+
    "\10\0\6\310\51\0\4\311\7\0\2\311\10\0\6\311"+
    "\51\0\3\220\101\0\4\312\7\0\2\312\10\0\6\312"+
    "\51\0\4\313\7\0\2\313\10\0\6\313\51\0\4\314"+
    "\7\0\2\314\10\0\6\314\40\0\1\315\71\0\2\111"+
    "\1\0\17\111\1\0\63\111\1\0\12\111\1\0\66\111"+
    "\23\0\4\244\100\0\4\244\17\0\1\244\11\0\3\241"+
    "\44\0\3\247\20\0\1\247\60\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\16\43\1\316\11\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\317\1\0\30\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\1\320\27\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\4\43\1\321"+
    "\15\43\1\322\5\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\22\43\1\323\5\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\4\43\1\324\23\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\22\43\1\325"+
    "\5\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\1\326\27\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\4\43\1\327\23\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\14\43\1\330\13\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\13\43\1\331\5\43"+
    "\1\332\6\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\4\43\1\333\23\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\16\43\1\334\11\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\20\43\1\335\7\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\336\1\0\30\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\4\43"+
    "\1\337\13\43\1\340\7\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\12\43\1\341\15\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\2\43\1\342\25\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\23\43"+
    "\1\343\4\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\23\43\1\344\4\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\22\43\1\345\5\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\15\43\1\346\12\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\4\43"+
    "\1\347\23\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\16\43\1\350\11\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\15\43\1\351\12\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\15\43\1\352\2\43"+
    "\1\353\7\43\27\0\4\354\7\0\2\354\10\0\6\354"+
    "\51\0\4\217\7\0\2\217\10\0\6\217\51\0\4\213"+
    "\7\0\2\213\10\0\6\213\51\0\4\355\7\0\2\355"+
    "\10\0\6\355\51\0\4\224\7\0\2\224\10\0\6\224"+
    "\51\0\4\220\7\0\2\220\10\0\6\220\51\0\4\43"+
    "\7\0\4\43\4\0\1\356\1\0\30\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\21\43\1\357\6\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\12\43"+
    "\1\360\15\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\10\43\1\361\17\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\20\43\1\362\7\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\10\43\1\363\17\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\14\43"+
    "\1\364\13\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\22\43\1\365\5\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\4\43\1\366\23\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\10\43\1\367\17\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\20\43"+
    "\1\370\7\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\10\43\1\371\17\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\10\43\1\372\17\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\13\43\1\373\14\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\4\43"+
    "\1\374\23\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\1\375\27\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\20\43\1\376\7\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\2\43\1\377\25\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\2\43\1\u0100"+
    "\25\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\21\43\1\u0101\6\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\15\43\1\u0102\12\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\6\43\1\u0103\21\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\4\43\1\u0104"+
    "\23\43\27\0\4\u0105\7\0\2\u0105\10\0\6\u0105\51\0"+
    "\4\u0106\7\0\2\u0106\10\0\6\u0106\51\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\2\43\1\u0107\25\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\4\43\1\u0108"+
    "\23\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\15\43\1\u0109\12\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\15\43\1\u010a\12\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\10\43\1\u010b\17\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\7\43\1\u010c"+
    "\20\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\6\43\1\u010d\21\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\22\43\1\u010e\5\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\26\43\1\u010f\1\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\15\43\1\u0110"+
    "\12\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\21\43\1\u0111\6\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\22\43\1\u0112\5\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\6\43\1\u0113\21\43\27\0"+
    "\4\43\7\0\4\43\4\0\1\43\1\0\15\43\1\u0114"+
    "\12\43\27\0\4\43\7\0\4\43\4\0\1\43\1\0"+
    "\22\43\1\u0115\5\43\27\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\7\43\1\u0116\20\43\27\0\4\43\7\0"+
    "\4\43\4\0\1\43\1\0\14\43\1\u0117\13\43\27\0"+
    "\4\216\7\0\2\216\10\0\6\216\51\0\4\223\7\0"+
    "\2\223\10\0\6\223\51\0\4\43\7\0\4\43\4\0"+
    "\1\43\1\0\1\u0118\27\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\22\43\1\u0119\5\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\23\43\1\u011a\4\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\2\43"+
    "\1\u011b\25\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\2\43\1\u011c\25\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\20\43\1\u011d\7\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\15\43\1\u011e\12\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\4\43"+
    "\1\u011f\23\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\23\43\1\u0120\4\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\4\43\1\u0121\23\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\23\43\1\u0122\4\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\21\43"+
    "\1\u0123\6\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\4\43\1\u0124\23\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\22\43\1\u0125\5\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\16\43\1\u0126\11\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\20\43"+
    "\1\u0127\7\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\22\43\1\u0128\5\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\22\43\1\u0129\5\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\23\43\1\u012a\4\43"+
    "\27\0\4\43\7\0\4\43\4\0\1\43\1\0\15\43"+
    "\1\u012b\12\43\27\0\4\43\7\0\4\43\4\0\1\43"+
    "\1\0\4\43\1\u012c\23\43\27\0\4\43\7\0\4\43"+
    "\4\0\1\43\1\0\6\43\1\u012d\21\43\27\0\4\43"+
    "\7\0\4\43\4\0\1\43\1\0\7\43\1\u012e\20\43"+
    "\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14212];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\11\3\1\3\11\2\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\2\11\1\1\4\11\21\1\1\11"+
    "\1\1\1\11\2\1\2\11\2\1\1\11\1\1\1\11"+
    "\10\1\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\0\2\11\2\1\2\11\1\1\1\11\4\0\1\11"+
    "\1\0\1\1\3\11\1\1\1\0\1\11\35\1\1\11"+
    "\1\1\2\11\4\0\1\11\5\0\1\11\2\0\12\11"+
    "\1\0\4\1\2\11\34\1\1\11\6\0\1\11\36\1"+
    "\2\0\27\1\2\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[302];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  int commentNestingDepth = 0;
  int previousState = YYINITIAL;
  boolean newLineSeen = false;

  public OdinLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OdinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 123: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 124: break;
          case 3:
            { return NEW_LINE;
            }
          // fall through
          case 125: break;
          case 4:
            { yybegin(NLSEMI_STATE); return NOT;
            }
          // fall through
          case 126: break;
          case 5:
            { yybegin(DQ_STRING_STATE); return DQ_STRING_START;
            }
          // fall through
          case 127: break;
          case 6:
            { return HASH;
            }
          // fall through
          case 128: break;
          case 7:
            { return DOLLAR;
            }
          // fall through
          case 129: break;
          case 8:
            { return MOD;
            }
          // fall through
          case 130: break;
          case 9:
            { return AND;
            }
          // fall through
          case 131: break;
          case 10:
            { yybegin(SQ_STRING_STATE); return SQ_STRING_START;
            }
          // fall through
          case 132: break;
          case 11:
            { return LPAREN;
            }
          // fall through
          case 133: break;
          case 12:
            { yybegin(NLSEMI_STATE); return RPAREN;
            }
          // fall through
          case 134: break;
          case 13:
            { return STAR;
            }
          // fall through
          case 135: break;
          case 14:
            { return PLUS;
            }
          // fall through
          case 136: break;
          case 15:
            { return COMMA;
            }
          // fall through
          case 137: break;
          case 16:
            { return MINUS;
            }
          // fall through
          case 138: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 139: break;
          case 18:
            { return DIV;
            }
          // fall through
          case 140: break;
          case 19:
            { yybegin(NLSEMI_STATE); return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 141: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 142: break;
          case 21:
            { return SEMICOLON;
            }
          // fall through
          case 143: break;
          case 22:
            { return LT;
            }
          // fall through
          case 144: break;
          case 23:
            { return EQ;
            }
          // fall through
          case 145: break;
          case 24:
            { return GT;
            }
          // fall through
          case 146: break;
          case 25:
            { return QUESTION;
            }
          // fall through
          case 147: break;
          case 26:
            { return AT;
            }
          // fall through
          case 148: break;
          case 27:
            { yybegin(NLSEMI_STATE); return IDENTIFIER;
            }
          // fall through
          case 149: break;
          case 28:
            { return LBRACKET;
            }
          // fall through
          case 150: break;
          case 29:
            { yybegin(NEXT_LINE);
            }
          // fall through
          case 151: break;
          case 30:
            { yybegin(NLSEMI_STATE); return RBRACKET;
            }
          // fall through
          case 152: break;
          case 31:
            { yybegin(NLSEMI_STATE); return CARET;
            }
          // fall through
          case 153: break;
          case 32:
            { return LBRACE;
            }
          // fall through
          case 154: break;
          case 33:
            { return PIPE;
            }
          // fall through
          case 155: break;
          case 34:
            { yybegin(NLSEMI_STATE); return RBRACE;
            }
          // fall through
          case 156: break;
          case 35:
            { return TILDE;
            }
          // fall through
          case 157: break;
          case 36:
            { return DQ_STRING_LITERAL;
            }
          // fall through
          case 158: break;
          case 37:
            { yybegin(YYINITIAL); return NEW_LINE;
            }
          // fall through
          case 159: break;
          case 38:
            { yybegin(NLSEMI_STATE); return DQ_STRING_END;
            }
          // fall through
          case 160: break;
          case 39:
            { return SQ_STRING_LITERAL;
            }
          // fall through
          case 161: break;
          case 40:
            { yybegin(NLSEMI_STATE); return SQ_STRING_END;
            }
          // fall through
          case 162: break;
          case 41:
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 163: break;
          case 42:
            { yybegin(YYINITIAL); return EOS_TOKEN;
            }
          // fall through
          case 164: break;
          case 43:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 165: break;
          case 44:
            { newLineSeen = true; return NEW_LINE;
            }
          // fall through
          case 166: break;
          case 45:
            { return NEQ;
            }
          // fall through
          case 167: break;
          case 46:
            { return REMAINDER;
            }
          // fall through
          case 168: break;
          case 47:
            { return MOD_EQ;
            }
          // fall through
          case 169: break;
          case 48:
            { return ANDAND;
            }
          // fall through
          case 170: break;
          case 49:
            { return AND_EQ;
            }
          // fall through
          case 171: break;
          case 50:
            { return ANDNOT;
            }
          // fall through
          case 172: break;
          case 51:
            { return STAR_EQ;
            }
          // fall through
          case 173: break;
          case 52:
            { return PLUS_EQ;
            }
          // fall through
          case 174: break;
          case 53:
            { return MINUS_EQ;
            }
          // fall through
          case 175: break;
          case 54:
            { return ARROW;
            }
          // fall through
          case 176: break;
          case 55:
            { return RANGE;
            }
          // fall through
          case 177: break;
          case 56:
            { yybegin(NLSEMI_STATE); return FLOAT_DEC_LITERAL;
            }
          // fall through
          case 178: break;
          case 57:
            { yybegin(NLSEMI_STATE); return DOT_QUESTION;
            }
          // fall through
          case 179: break;
          case 58:
            { yybegin(BLOCK_COMMENT_STATE); newLineSeen=false; commentNestingDepth = 1; previousState=YYINITIAL; return BLOCK_COMMENT_START;
            }
          // fall through
          case 180: break;
          case 59:
            { return LINE_COMMENT;
            }
          // fall through
          case 181: break;
          case 60:
            { return DIV_EQ;
            }
          // fall through
          case 182: break;
          case 61:
            { yybegin(NLSEMI_STATE); return COMPLEX_INTEGER_DEC_LITERAL;
            }
          // fall through
          case 183: break;
          case 62:
            { return LSHIFT;
            }
          // fall through
          case 184: break;
          case 63:
            { return LTE;
            }
          // fall through
          case 185: break;
          case 64:
            { return EQEQ;
            }
          // fall through
          case 186: break;
          case 65:
            { return GTE;
            }
          // fall through
          case 187: break;
          case 66:
            { return RSHIFT;
            }
          // fall through
          case 188: break;
          case 67:
            { yybegin(NLSEMI_STATE); return RAW_STRING_LITERAL;
            }
          // fall through
          case 189: break;
          case 68:
            { return DO;
            }
          // fall through
          case 190: break;
          case 69:
            { return IF_TOKEN;
            }
          // fall through
          case 191: break;
          case 70:
            { return IN;
            }
          // fall through
          case 192: break;
          case 71:
            { return OR_EQ;
            }
          // fall through
          case 193: break;
          case 72:
            { return OROR;
            }
          // fall through
          case 194: break;
          case 73:
            { return XOR_EQ;
            }
          // fall through
          case 195: break;
          case 74:
            { yybegin(BLOCK_COMMENT_STATE); newLineSeen=false; commentNestingDepth=1; previousState=NLSEMI_STATE; return BLOCK_COMMENT_START;
            }
          // fall through
          case 196: break;
          case 75:
            { commentNestingDepth--;
          if (commentNestingDepth <= 0) {
              if(!newLineSeen) {
                  yybegin(previousState);
              } else {
                  yybegin(YYINITIAL);
              }

              return BLOCK_COMMENT_END;
          } else {
              return BLOCK_COMMENT;
          }
            }
          // fall through
          case 197: break;
          case 76:
            { commentNestingDepth++; return BLOCK_COMMENT;
            }
          // fall through
          case 198: break;
          case 77:
            { return REMAINDER_EQ;
            }
          // fall through
          case 199: break;
          case 78:
            { return ANDAND_EQ;
            }
          // fall through
          case 200: break;
          case 79:
            { return BITWISE_AND_NOT_EQ;
            }
          // fall through
          case 201: break;
          case 80:
            { yybegin(NLSEMI_STATE); return TRIPLE_DASH;
            }
          // fall through
          case 202: break;
          case 81:
            { return RANGE_EXCLUSIVE;
            }
          // fall through
          case 203: break;
          case 82:
            { return RANGE_INCLUSIVE;
            }
          // fall through
          case 204: break;
          case 83:
            // lookahead expression with fixed lookahead length
            zzMarkedPos = Character.offsetByCodePoints
                (zzBufferL, zzMarkedPos, -1);
            { yybegin(NLSEMI_STATE); return FLOAT_DEC_LITERAL;
            }
          // fall through
          case 205: break;
          case 84:
            { yybegin(NLSEMI_STATE); return INTEGER_BIN_LITERAL;
            }
          // fall through
          case 206: break;
          case 85:
            { yybegin(NLSEMI_STATE); return INTEGER_HEX_LITERAL;
            }
          // fall through
          case 207: break;
          case 86:
            { yybegin(NLSEMI_STATE); return INTEGER_OCT_LITERAL;
            }
          // fall through
          case 208: break;
          case 87:
            { return LSHIFT_EQ;
            }
          // fall through
          case 209: break;
          case 88:
            { return RSHIFT_EQ;
            }
          // fall through
          case 210: break;
          case 89:
            { return FOR;
            }
          // fall through
          case 211: break;
          case 90:
            { return MAP;
            }
          // fall through
          case 212: break;
          case 91:
            { yybegin(NLSEMI_STATE); return NIL;
            }
          // fall through
          case 213: break;
          case 92:
            { return OROR_EQ;
            }
          // fall through
          case 214: break;
          case 93:
            { return CASE;
            }
          // fall through
          case 215: break;
          case 94:
            { return CAST;
            }
          // fall through
          case 216: break;
          case 95:
            { return ELSE_TOKEN;
            }
          // fall through
          case 217: break;
          case 96:
            { return ENUM;
            }
          // fall through
          case 218: break;
          case 97:
            { return PROC;
            }
          // fall through
          case 219: break;
          case 98:
            { yybegin(NLSEMI_STATE); return TRUE;
            }
          // fall through
          case 220: break;
          case 99:
            { return WHEN;
            }
          // fall through
          case 221: break;
          case 100:
            { yybegin(NLSEMI_STATE); return BREAK;
            }
          // fall through
          case 222: break;
          case 101:
            { return DEFER;
            }
          // fall through
          case 223: break;
          case 102:
            { yybegin(NLSEMI_STATE); return FALSE;
            }
          // fall through
          case 224: break;
          case 103:
            { return UNION;
            }
          // fall through
          case 225: break;
          case 104:
            { return USING;
            }
          // fall through
          case 226: break;
          case 105:
            { return WHERE;
            }
          // fall through
          case 227: break;
          case 106:
            { return IMPORT;
            }
          // fall through
          case 228: break;
          case 107:
            { return MATRIX;
            }
          // fall through
          case 229: break;
          case 108:
            { return NOT_IN;
            }
          // fall through
          case 230: break;
          case 109:
            { yybegin(NLSEMI_STATE); return RETURN;
            }
          // fall through
          case 231: break;
          case 110:
            { return STRUCT;
            }
          // fall through
          case 232: break;
          case 111:
            { return SWITCH;
            }
          // fall through
          case 233: break;
          case 112:
            { return BIT_SET;
            }
          // fall through
          case 234: break;
          case 113:
            { return DYNAMIC;
            }
          // fall through
          case 235: break;
          case 114:
            { return FOREIGN;
            }
          // fall through
          case 236: break;
          case 115:
            { return OR_ELSE;
            }
          // fall through
          case 237: break;
          case 116:
            { return PACKAGE;
            }
          // fall through
          case 238: break;
          case 117:
            { yybegin(NLSEMI_STATE); return CONTINUE;
            }
          // fall through
          case 239: break;
          case 118:
            { return DISTINCT;
            }
          // fall through
          case 240: break;
          case 119:
            { return AUTO_CAST;
            }
          // fall through
          case 241: break;
          case 120:
            { yybegin(NLSEMI_STATE); return OR_RETURN;
            }
          // fall through
          case 242: break;
          case 121:
            { return TRANSMUTE;
            }
          // fall through
          case 243: break;
          case 122:
            { yybegin(NLSEMI_STATE); return FALLTHROUGH;
            }
          // fall through
          case 244: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
