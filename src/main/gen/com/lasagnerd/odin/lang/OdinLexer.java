// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Odin.flex

package com.lasagnerd.odin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.lasagnerd.odin.lang.psi.OdinTypes.*;


public class OdinLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\u10ff\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\1\1\3\22\0\1\1"+
    "\1\4\1\5\2\0\1\6\1\7\1\0\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\7\21"+
    "\2\22\1\23\1\24\1\25\1\26\1\27\2\0\6\30"+
    "\16\31\1\32\5\31\1\0\1\33\2\0\1\34\1\0"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\31"+
    "\1\44\1\31\1\45\1\31\1\46\1\47\1\50\1\51"+
    "\1\31\1\52\1\53\1\54\1\55\1\56\1\31\1\57"+
    "\2\31\1\60\1\61\1\62\1\63\u0181\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[512];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\2\17"+
    "\1\20\1\21\1\22\1\23\1\24\7\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\32\2\2\1\34\1\35"+
    "\1\36\1\37\1\40\1\41\1\42\1\43\1\44\2\0"+
    "\1\45\1\46\2\0\1\47\1\50\1\51\1\52\1\53"+
    "\3\25\1\54\4\25\1\55\1\56\1\57\1\32\4\0"+
    "\1\60\1\61\1\62\1\63\1\0\1\64\1\65\1\66"+
    "\1\67\1\25\1\70\5\25\1\71\3\0\1\72\3\25"+
    "\1\73\2\25\1\0\1\74\4\25\1\0\1\75\1\25"+
    "\1\76\1\77\1\100";

  private static int [] zzUnpackAction() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\150\0\u0138"+
    "\0\u016c\0\150\0\150\0\u01a0\0\u01d4\0\150\0\u0208\0\u023c"+
    "\0\u0270\0\u02a4\0\u02d8\0\150\0\150\0\u030c\0\u0340\0\u0374"+
    "\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac\0\u04e0\0\150"+
    "\0\u0514\0\150\0\u0548\0\u057c\0\150\0\u05b0\0\150\0\u05e4"+
    "\0\150\0\u0618\0\150\0\u064c\0\150\0\150\0\150\0\150"+
    "\0\150\0\u0680\0\u06b4\0\u06e8\0\150\0\u071c\0\u0750\0\u0784"+
    "\0\150\0\150\0\150\0\u07b8\0\u07ec\0\u0820\0\u0854\0\u03a8"+
    "\0\u0888\0\u08bc\0\u08f0\0\u0924\0\150\0\u0958\0\150\0\150"+
    "\0\u098c\0\u09c0\0\u09f4\0\u0a28\0\150\0\150\0\150\0\150"+
    "\0\u0a5c\0\u0a90\0\u0ac4\0\150\0\150\0\u0af8\0\u03a8\0\u0b2c"+
    "\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc\0\150\0\u0c30\0\u0c64\0\u0c98"+
    "\0\150\0\u0ccc\0\u0d00\0\u0d34\0\u03a8\0\u0d68\0\u0d9c\0\u0dd0"+
    "\0\u03a8\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u03a8\0\u0f08"+
    "\0\u03a8\0\u03a8\0\u03a8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\2\23\1\24\1\25\1\26\1\27\1\30\3\31\1\3"+
    "\4\31\1\32\1\31\1\33\1\31\1\34\4\31\1\35"+
    "\1\36\1\37\4\31\1\40\1\41\1\42\1\43\2\44"+
    "\2\3\1\44\1\45\25\44\1\46\30\44\65\0\1\4"+
    "\1\47\1\50\62\0\2\5\106\0\1\51\43\0\1\52"+
    "\17\0\1\53\44\0\1\54\16\0\1\55\63\0\1\56"+
    "\63\0\1\57\63\0\1\60\1\61\52\0\1\62\57\0"+
    "\1\63\4\0\1\64\6\0\1\65\55\0\3\23\11\0"+
    "\1\23\13\0\1\66\6\0\1\67\24\0\3\23\11\0"+
    "\1\23\54\0\1\70\1\71\63\0\1\72\63\0\1\73"+
    "\1\74\54\0\3\31\5\0\3\31\1\0\24\31\24\0"+
    "\3\31\5\0\3\31\1\0\5\31\1\75\16\31\24\0"+
    "\3\31\5\0\3\31\1\0\14\31\1\76\7\31\24\0"+
    "\3\31\5\0\3\31\1\0\12\31\1\77\1\100\10\31"+
    "\24\0\3\31\5\0\3\31\1\0\1\31\1\101\14\31"+
    "\1\102\5\31\24\0\3\31\5\0\3\31\1\0\5\31"+
    "\1\103\16\31\24\0\3\31\5\0\3\31\1\0\20\31"+
    "\1\104\3\31\32\0\1\105\32\0\1\106\30\0\1\107"+
    "\35\0\2\44\2\0\1\44\1\0\25\44\1\0\30\44"+
    "\5\0\1\110\12\0\2\111\10\0\1\112\2\0\2\110"+
    "\2\0\2\110\4\0\1\110\2\0\1\110\1\0\1\110"+
    "\1\113\1\110\1\114\6\0\1\47\107\0\1\115\63\0"+
    "\1\116\62\0\1\117\1\120\35\0\12\63\1\121\51\63"+
    "\2\64\2\0\60\64\20\0\2\122\62\0\3\123\5\0"+
    "\1\123\4\0\6\123\47\0\1\124\63\0\1\125\55\0"+
    "\3\31\5\0\3\31\1\0\6\31\1\126\15\31\24\0"+
    "\3\31\5\0\3\31\1\0\16\31\1\127\5\31\24\0"+
    "\3\31\5\0\3\31\1\0\15\31\1\130\6\31\24\0"+
    "\3\31\5\0\3\31\1\0\3\31\1\131\20\31\24\0"+
    "\3\31\5\0\3\31\1\0\14\31\1\132\7\31\24\0"+
    "\3\31\5\0\3\31\1\0\20\31\1\133\3\31\24\0"+
    "\3\31\5\0\3\31\1\0\16\31\1\134\5\31\32\0"+
    "\1\135\55\0\2\110\62\0\3\136\5\0\1\136\4\0"+
    "\6\136\41\0\3\137\5\0\1\137\4\0\6\137\41\0"+
    "\3\140\5\0\1\140\4\0\6\140\21\0\17\63\1\141"+
    "\44\63\20\0\2\122\12\0\1\122\47\0\3\123\5\0"+
    "\1\123\3\0\7\123\41\0\3\31\5\0\3\31\1\0"+
    "\5\31\1\142\16\31\24\0\3\31\5\0\3\31\1\0"+
    "\14\31\1\143\7\31\24\0\3\31\5\0\3\31\1\0"+
    "\11\31\1\144\12\31\24\0\3\31\5\0\3\31\1\0"+
    "\3\31\1\145\20\31\24\0\3\31\5\0\3\31\1\0"+
    "\21\31\1\146\2\31\24\0\3\31\5\0\3\31\1\0"+
    "\21\31\1\147\2\31\24\0\3\150\5\0\1\150\4\0"+
    "\6\150\41\0\3\114\5\0\1\114\4\0\6\114\41\0"+
    "\3\110\5\0\1\110\4\0\6\110\41\0\3\31\5\0"+
    "\3\31\1\0\16\31\1\151\5\31\24\0\3\31\5\0"+
    "\3\31\1\0\16\31\1\152\5\31\24\0\3\31\5\0"+
    "\3\31\1\0\1\31\1\153\22\31\24\0\3\31\5\0"+
    "\3\31\1\0\16\31\1\154\5\31\24\0\3\31\5\0"+
    "\3\31\1\0\3\31\1\155\20\31\24\0\3\156\5\0"+
    "\1\156\4\0\6\156\41\0\3\31\5\0\3\31\1\0"+
    "\20\31\1\157\3\31\24\0\3\31\5\0\3\31\1\0"+
    "\7\31\1\160\14\31\24\0\3\31\5\0\3\31\1\0"+
    "\13\31\1\161\10\31\24\0\3\31\5\0\3\31\1\0"+
    "\20\31\1\162\3\31\24\0\3\113\5\0\1\113\4\0"+
    "\6\113\41\0\3\31\5\0\3\31\1\0\5\31\1\163"+
    "\16\31\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3900];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\5\1\2\11\12\1\1\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\5\11"+
    "\2\0\1\1\1\11\2\0\1\1\3\11\11\1\1\11"+
    "\1\1\2\11\4\0\4\11\1\0\2\1\2\11\7\1"+
    "\1\11\3\0\1\11\6\1\1\0\5\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[115];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
 StringBuffer string = new StringBuffer();

  public OdinLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OdinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 65: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 66: break;
          case 3:
            { return NOT;
            }
          // fall through
          case 67: break;
          case 4:
            { yybegin(STRING_STATE); string.setLength(0);
            }
          // fall through
          case 68: break;
          case 5:
            { return MOD;
            }
          // fall through
          case 69: break;
          case 6:
            { return AND_BITWISE;
            }
          // fall through
          case 70: break;
          case 7:
            { return LPAREN;
            }
          // fall through
          case 71: break;
          case 8:
            { return RPAREN;
            }
          // fall through
          case 72: break;
          case 9:
            { return STAR;
            }
          // fall through
          case 73: break;
          case 10:
            { return PLUS;
            }
          // fall through
          case 74: break;
          case 11:
            { return COMMA;
            }
          // fall through
          case 75: break;
          case 12:
            { return MINUS;
            }
          // fall through
          case 76: break;
          case 13:
            { return DOT;
            }
          // fall through
          case 77: break;
          case 14:
            { return DIV;
            }
          // fall through
          case 78: break;
          case 15:
            { return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 79: break;
          case 16:
            { return COLON;
            }
          // fall through
          case 80: break;
          case 17:
            { return SEMICOLON;
            }
          // fall through
          case 81: break;
          case 18:
            { return LT;
            }
          // fall through
          case 82: break;
          case 19:
            { return EQ;
            }
          // fall through
          case 83: break;
          case 20:
            { return GT;
            }
          // fall through
          case 84: break;
          case 21:
            { return IDENTIFIER;
            }
          // fall through
          case 85: break;
          case 22:
            { return LBRACE;
            }
          // fall through
          case 86: break;
          case 23:
            { return OR_BITWISE;
            }
          // fall through
          case 87: break;
          case 24:
            { return RBRACE;
            }
          // fall through
          case 88: break;
          case 25:
            { return XOR_BITWISE;
            }
          // fall through
          case 89: break;
          case 26:
            { 
            }
          // fall through
          case 90: break;
          case 27:
            { yybegin(YYINITIAL); return STRING_LITERAL;
            }
          // fall through
          case 91: break;
          case 28:
            { return NEQ;
            }
          // fall through
          case 92: break;
          case 29:
            { return REMAINDER;
            }
          // fall through
          case 93: break;
          case 30:
            { return MOD_EQ;
            }
          // fall through
          case 94: break;
          case 31:
            { return ANDAND;
            }
          // fall through
          case 95: break;
          case 32:
            { return AND_EQ;
            }
          // fall through
          case 96: break;
          case 33:
            { return STAR_EQ;
            }
          // fall through
          case 97: break;
          case 34:
            { return PLUS_EQ;
            }
          // fall through
          case 98: break;
          case 35:
            { return MINUS_EQ;
            }
          // fall through
          case 99: break;
          case 36:
            { return ARROW;
            }
          // fall through
          case 100: break;
          case 37:
            { return LINE_COMMENT;
            }
          // fall through
          case 101: break;
          case 38:
            { return DIV_EQ;
            }
          // fall through
          case 102: break;
          case 39:
            { return LSHIFT;
            }
          // fall through
          case 103: break;
          case 40:
            { return LTE;
            }
          // fall through
          case 104: break;
          case 41:
            { return EQEQ;
            }
          // fall through
          case 105: break;
          case 42:
            { return GTE;
            }
          // fall through
          case 106: break;
          case 43:
            { return RSHIFT;
            }
          // fall through
          case 107: break;
          case 44:
            { return IN;
            }
          // fall through
          case 108: break;
          case 45:
            { return OR_EQ;
            }
          // fall through
          case 109: break;
          case 46:
            { return OROR;
            }
          // fall through
          case 110: break;
          case 47:
            { return XOR_EQ;
            }
          // fall through
          case 111: break;
          case 48:
            { return REMAINDER_EQ;
            }
          // fall through
          case 112: break;
          case 49:
            { return ANDAND_EQ;
            }
          // fall through
          case 113: break;
          case 50:
            { return RANGE_EXCLUSIVE;
            }
          // fall through
          case 114: break;
          case 51:
            { return RANGE_INCLUSIVE;
            }
          // fall through
          case 115: break;
          case 52:
            { return INTEGER_OCT_LITERAL;
            }
          // fall through
          case 116: break;
          case 53:
            { return INTEGER_HEX_LITERAL;
            }
          // fall through
          case 117: break;
          case 54:
            { return LSHIFT_EQ;
            }
          // fall through
          case 118: break;
          case 55:
            { return RSHIFT_EQ;
            }
          // fall through
          case 119: break;
          case 56:
            { return FOR;
            }
          // fall through
          case 120: break;
          case 57:
            { return OROR_EQ;
            }
          // fall through
          case 121: break;
          case 58:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 122: break;
          case 59:
            { return PROC;
            }
          // fall through
          case 123: break;
          case 60:
            { return DEFER;
            }
          // fall through
          case 124: break;
          case 61:
            { return IMPORT;
            }
          // fall through
          case 125: break;
          case 62:
            { return RETURN;
            }
          // fall through
          case 126: break;
          case 63:
            { return STRUCT;
            }
          // fall through
          case 127: break;
          case 64:
            { return PACKAGE;
            }
          // fall through
          case 128: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
