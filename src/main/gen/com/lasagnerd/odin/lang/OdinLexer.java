// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Odin.flex

package com.lasagnerd.odin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import com.lasagnerd.odin.lang.psi.OdinTokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.lasagnerd.odin.lang.psi.OdinTypes.*;


public class OdinLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DQ_STRING_STATE = 2;
  public static final int SQ_STRING_STATE = 4;
  public static final int NLSEMI_STATE = 6;
  public static final int NEXT_LINE = 8;
  public static final int BLOCK_COMMENT_STATE = 10;
  public static final int INTEGER_LITERAL_STATE = 12;
  public static final int FLOAT_LITERAL_STATE = 14;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u0100\1\u1100\1\u1200\1\u1300\1\u0100\1\u1400\1\u1500"+
    "\1\u1600\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u0100\1\u1c00"+
    "\1\u1d00\1\u1e00\12\u1f00\1\u2000\1\u2100\1\u2200\1\u1f00\1\u2300"+
    "\1\u2400\2\u1f00\31\u0100\1\u2500\121\u0100\1\u2600\4\u0100\1\u2700"+
    "\1\u0100\1\u2800\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\53\u0100"+
    "\1\u2e00\41\u1f00\1\u0100\1\u2f00\1\u3000\1\u0100\1\u3100\1\u3200"+
    "\1\u3300\1\u3400\1\u1f00\1\u3500\1\u3600\1\u3700\1\u3800\1\u0100"+
    "\1\u3900\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u1f00"+
    "\1\u4000\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700"+
    "\1\u4800\1\u4900\1\u4a00\1\u4b00\1\u1f00\1\u4c00\1\u4d00\1\u4e00"+
    "\1\u1f00\3\u0100\1\u4f00\1\u5000\1\u5100\12\u1f00\4\u0100\1\u5200"+
    "\17\u1f00\2\u0100\1\u5300\41\u1f00\2\u0100\1\u5400\1\u5500\2\u1f00"+
    "\1\u5600\1\u5700\27\u0100\1\u5800\2\u0100\1\u5900\45\u1f00\1\u0100"+
    "\1\u5a00\1\u5b00\11\u1f00\1\u5c00\27\u1f00\1\u5d00\1\u5e00\1\u5f00"+
    "\1\u6000\11\u1f00\1\u6100\1\u6200\5\u1f00\1\u6300\1\u6400\4\u1f00"+
    "\1\u6500\21\u1f00\246\u0100\1\u6600\20\u0100\1\u6700\1\u6800\25\u0100"+
    "\1\u6900\34\u0100\1\u6a00\14\u1f00\2\u0100\1\u6b00\u0e05\u1f00";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\0\1\3\1\4\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\6\26\2\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\4\37\1\40\1\37\16\41\1\42\5\41"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\41\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\41"+
    "\1\101\1\102\1\103\1\104\53\0\1\41\12\0\1\41"+
    "\4\0\1\41\5\0\27\41\1\0\37\41\1\0\u01ca\41"+
    "\4\0\14\41\16\0\5\41\7\0\1\41\1\0\1\41"+
    "\201\0\5\41\1\0\2\41\2\0\4\41\1\0\1\41"+
    "\6\0\1\41\1\0\3\41\1\0\1\41\1\0\24\41"+
    "\1\0\123\41\1\0\213\41\10\0\246\41\1\0\46\41"+
    "\2\0\1\41\6\0\51\41\107\0\33\41\4\0\4\41"+
    "\55\0\53\41\43\0\2\41\1\0\143\41\1\0\1\41"+
    "\17\0\2\41\7\0\2\41\12\0\3\41\2\0\1\41"+
    "\20\0\1\41\1\0\36\41\35\0\131\41\13\0\1\41"+
    "\30\0\41\41\11\0\2\41\4\0\1\41\5\0\26\41"+
    "\4\0\1\41\11\0\1\41\3\0\1\41\27\0\31\41"+
    "\7\0\13\41\65\0\25\41\1\0\10\41\106\0\66\41"+
    "\3\0\1\41\22\0\1\41\7\0\12\41\17\0\20\41"+
    "\4\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41"+
    "\1\0\1\41\3\0\4\41\3\0\1\41\20\0\1\41"+
    "\15\0\2\41\1\0\3\41\16\0\2\41\12\0\1\41"+
    "\10\0\6\41\4\0\2\41\2\0\26\41\1\0\7\41"+
    "\1\0\2\41\1\0\2\41\1\0\2\41\37\0\4\41"+
    "\1\0\1\41\23\0\3\41\20\0\11\41\1\0\3\41"+
    "\1\0\26\41\1\0\7\41\1\0\2\41\1\0\5\41"+
    "\3\0\1\41\22\0\1\41\17\0\2\41\27\0\1\41"+
    "\13\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41"+
    "\1\0\2\41\1\0\5\41\3\0\1\41\36\0\2\41"+
    "\1\0\3\41\17\0\1\41\21\0\1\41\1\0\6\41"+
    "\3\0\3\41\1\0\4\41\3\0\2\41\1\0\1\41"+
    "\1\0\2\41\3\0\2\41\3\0\3\41\3\0\14\41"+
    "\26\0\1\41\64\0\10\41\1\0\3\41\1\0\27\41"+
    "\1\0\20\41\3\0\1\41\32\0\3\41\5\0\2\41"+
    "\36\0\1\41\4\0\10\41\1\0\3\41\1\0\27\41"+
    "\1\0\12\41\1\0\5\41\3\0\1\41\40\0\1\41"+
    "\1\0\2\41\17\0\2\41\22\0\10\41\1\0\3\41"+
    "\1\0\51\41\2\0\1\41\20\0\1\41\5\0\3\41"+
    "\10\0\3\41\30\0\6\41\5\0\22\41\3\0\30\41"+
    "\1\0\11\41\1\0\1\41\2\0\7\41\72\0\60\41"+
    "\1\0\2\41\14\0\7\41\72\0\2\41\1\0\1\41"+
    "\1\0\5\41\1\0\30\41\1\0\1\41\1\0\12\41"+
    "\1\0\2\41\11\0\1\41\2\0\5\41\1\0\1\41"+
    "\25\0\4\41\40\0\1\41\77\0\10\41\1\0\44\41"+
    "\33\0\5\41\163\0\53\41\24\0\1\41\20\0\6\41"+
    "\4\0\4\41\3\0\1\41\3\0\2\41\7\0\3\41"+
    "\4\0\15\41\14\0\1\41\21\0\46\41\1\0\1\41"+
    "\5\0\1\41\2\0\53\41\1\0\115\41\1\0\4\41"+
    "\2\0\7\41\1\0\1\41\1\0\4\41\2\0\51\41"+
    "\1\0\4\41\2\0\41\41\1\0\4\41\2\0\7\41"+
    "\1\0\1\41\1\0\4\41\2\0\17\41\1\0\71\41"+
    "\1\0\4\41\2\0\103\41\45\0\20\41\20\0\126\41"+
    "\2\0\6\41\3\0\u016c\41\2\0\21\41\1\0\32\41"+
    "\5\0\113\41\6\0\10\41\7\0\15\41\1\0\4\41"+
    "\16\0\22\41\16\0\22\41\16\0\15\41\1\0\3\41"+
    "\17\0\64\41\43\0\1\41\4\0\1\41\103\0\131\41"+
    "\7\0\5\41\2\0\42\41\1\0\1\41\5\0\106\41"+
    "\12\0\37\41\61\0\36\41\2\0\5\41\13\0\54\41"+
    "\4\0\32\41\66\0\27\41\11\0\65\41\122\0\1\41"+
    "\135\0\57\41\21\0\7\41\67\0\36\41\15\0\2\41"+
    "\12\0\54\41\32\0\44\41\51\0\3\41\12\0\44\41"+
    "\2\0\11\41\7\0\53\41\2\0\3\41\51\0\4\41"+
    "\1\0\6\41\1\0\2\41\3\0\1\41\5\0\300\41"+
    "\100\0\26\41\2\0\6\41\2\0\46\41\2\0\6\41"+
    "\2\0\10\41\1\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\37\41\2\0\65\41\1\0\7\41\1\0\1\41"+
    "\3\0\3\41\1\0\7\41\3\0\4\41\2\0\6\41"+
    "\4\0\15\41\5\0\3\41\1\0\7\41\164\0\1\41"+
    "\15\0\1\41\20\0\15\41\145\0\1\41\4\0\1\41"+
    "\2\0\12\41\1\0\1\41\3\0\5\41\6\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\4\41\1\0\13\41"+
    "\2\0\4\41\5\0\5\41\4\0\1\41\64\0\2\41"+
    "\u017b\0\57\41\1\0\57\41\1\0\205\41\6\0\4\41"+
    "\3\0\2\41\14\0\46\41\1\0\1\41\5\0\1\41"+
    "\2\0\70\41\7\0\1\41\20\0\27\41\11\0\7\41"+
    "\1\0\7\41\1\0\7\41\1\0\7\41\1\0\7\41"+
    "\1\0\7\41\1\0\7\41\1\0\7\41\120\0\1\41"+
    "\325\0\2\41\52\0\5\41\5\0\2\41\4\0\126\41"+
    "\6\0\3\41\1\0\132\41\1\0\4\41\5\0\53\41"+
    "\1\0\136\41\21\0\33\41\65\0\306\41\112\0\360\41"+
    "\20\0\215\41\103\0\56\41\2\0\15\41\3\0\20\41"+
    "\12\0\2\41\24\0\57\41\20\0\37\41\2\0\106\41"+
    "\61\0\11\41\2\0\147\41\2\0\65\41\2\0\5\41"+
    "\60\0\13\41\1\0\3\41\1\0\4\41\1\0\27\41"+
    "\35\0\64\41\16\0\62\41\76\0\6\41\3\0\1\41"+
    "\1\0\2\41\13\0\34\41\12\0\27\41\31\0\35\41"+
    "\7\0\57\41\34\0\1\41\20\0\5\41\1\0\12\41"+
    "\12\0\5\41\1\0\51\41\27\0\3\41\1\0\10\41"+
    "\24\0\27\41\3\0\1\41\3\0\62\41\1\0\1\41"+
    "\3\0\2\41\2\0\5\41\2\0\1\41\1\0\1\41"+
    "\30\0\3\41\2\0\13\41\7\0\3\41\14\0\6\41"+
    "\2\0\6\41\2\0\6\41\11\0\7\41\1\0\7\41"+
    "\1\0\53\41\1\0\14\41\10\0\163\41\35\0\244\41"+
    "\14\0\27\41\4\0\61\41\4\0\156\41\2\0\152\41"+
    "\46\0\7\41\14\0\5\41\5\0\1\41\1\0\12\41"+
    "\1\0\15\41\1\0\5\41\1\0\1\41\1\0\2\41"+
    "\1\0\2\41\1\0\154\41\41\0\153\41\22\0\100\41"+
    "\2\0\66\41\50\0\14\41\164\0\5\41\1\0\207\41"+
    "\44\0\32\41\6\0\32\41\13\0\131\41\3\0\6\41"+
    "\2\0\6\41\2\0\6\41\2\0\3\41\43\0\14\41"+
    "\1\0\32\41\1\0\23\41\1\0\2\41\1\0\17\41"+
    "\2\0\16\41\42\0\173\41\205\0\35\41\3\0\61\41"+
    "\57\0\40\41\15\0\24\41\1\0\10\41\6\0\46\41"+
    "\12\0\36\41\2\0\44\41\4\0\10\41\60\0\236\41"+
    "\22\0\44\41\4\0\44\41\4\0\50\41\10\0\64\41"+
    "\234\0\67\41\11\0\26\41\12\0\10\41\230\0\6\41"+
    "\2\0\1\41\1\0\54\41\1\0\2\41\3\0\1\41"+
    "\2\0\27\41\12\0\27\41\11\0\37\41\101\0\23\41"+
    "\1\0\2\41\12\0\26\41\12\0\32\41\106\0\70\41"+
    "\6\0\2\41\100\0\1\41\17\0\4\41\1\0\3\41"+
    "\1\0\35\41\52\0\35\41\3\0\35\41\43\0\10\41"+
    "\1\0\34\41\33\0\66\41\12\0\26\41\12\0\23\41"+
    "\15\0\22\41\156\0\111\41\67\0\63\41\15\0\63\41"+
    "\15\0\44\41\334\0\35\41\12\0\1\41\10\0\26\41"+
    "\232\0\27\41\14\0\65\41\113\0\55\41\40\0\31\41"+
    "\32\0\44\41\35\0\1\41\13\0\43\41\3\0\1\41"+
    "\14\0\60\41\16\0\4\41\25\0\1\41\1\0\1\41"+
    "\43\0\22\41\1\0\31\41\124\0\7\41\1\0\1\41"+
    "\1\0\4\41\1\0\17\41\1\0\12\41\7\0\57\41"+
    "\46\0\10\41\2\0\2\41\2\0\26\41\1\0\7\41"+
    "\1\0\2\41\1\0\5\41\3\0\1\41\22\0\1\41"+
    "\14\0\5\41\236\0\65\41\22\0\4\41\24\0\1\41"+
    "\40\0\60\41\24\0\2\41\1\0\1\41\270\0\57\41"+
    "\51\0\4\41\44\0\60\41\24\0\1\41\73\0\53\41"+
    "\15\0\1\41\107\0\33\41\345\0\54\41\164\0\100\41"+
    "\37\0\1\41\240\0\10\41\2\0\47\41\20\0\1\41"+
    "\1\0\1\41\34\0\1\41\12\0\50\41\7\0\1\41"+
    "\25\0\1\41\13\0\56\41\23\0\1\41\42\0\71\41"+
    "\7\0\11\41\1\0\45\41\21\0\1\41\61\0\36\41"+
    "\160\0\7\41\1\0\2\41\1\0\46\41\25\0\1\41"+
    "\31\0\6\41\1\0\2\41\1\0\40\41\16\0\1\41"+
    "\u0147\0\23\41\15\0\232\41\346\0\304\41\274\0\57\41"+
    "\321\0\107\41\271\0\71\41\7\0\37\41\161\0\36\41"+
    "\22\0\60\41\20\0\4\41\37\0\25\41\5\0\23\41"+
    "\260\0\100\41\200\0\113\41\5\0\1\41\102\0\15\41"+
    "\100\0\2\41\1\0\1\41\34\0\370\41\10\0\363\41"+
    "\15\0\37\41\61\0\3\41\21\0\4\41\10\0\u018c\41"+
    "\4\0\153\41\5\0\15\41\3\0\11\41\7\0\12\41"+
    "\146\0\125\41\1\0\107\41\1\0\2\41\2\0\1\41"+
    "\2\0\2\41\2\0\4\41\1\0\14\41\1\0\1\41"+
    "\1\0\7\41\1\0\101\41\1\0\4\41\2\0\10\41"+
    "\1\0\7\41\1\0\34\41\1\0\4\41\1\0\5\41"+
    "\1\0\1\41\3\0\7\41\1\0\u0154\41\2\0\31\41"+
    "\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41"+
    "\1\0\31\41\1\0\37\41\1\0\31\41\1\0\37\41"+
    "\1\0\31\41\1\0\10\41\64\0\55\41\12\0\7\41"+
    "\20\0\1\41\u0171\0\54\41\24\0\305\41\73\0\104\41"+
    "\7\0\1\41\264\0\4\41\1\0\33\41\1\0\2\41"+
    "\1\0\1\41\2\0\1\41\1\0\12\41\1\0\4\41"+
    "\1\0\1\41\1\0\1\41\6\0\1\41\4\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\3\41\1\0\2\41"+
    "\1\0\1\41\2\0\1\41\1\0\1\41\1\0\1\41"+
    "\1\0\1\41\1\0\1\41\1\0\2\41\1\0\1\41"+
    "\2\0\4\41\1\0\7\41\1\0\4\41\1\0\4\41"+
    "\1\0\1\41\1\0\12\41\1\0\21\41\5\0\3\41"+
    "\1\0\5\41\1\0\21\41\104\0\327\41\51\0\65\41"+
    "\13\0\336\41\2\0\u0182\41\16\0\u0131\41\37\0\36\41"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27648];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\10\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\1\20\33\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\2\44\1\46\1\44\1\47\1\2\1\50\2\47\1\51"+
    "\1\1\1\52\1\53\2\52\1\54\1\55\1\54\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\70\1\0\1\71\1\72\1\73\1\74\1\0"+
    "\1\75\1\76\2\0\1\77\1\0\1\100\1\101\1\102"+
    "\1\103\1\104\1\0\1\105\7\33\1\106\5\33\1\107"+
    "\1\33\1\110\15\33\1\111\1\112\1\113\1\44\7\0"+
    "\1\114\1\115\1\116\1\0\1\60\1\0\1\60\1\117"+
    "\1\120\1\121\1\122\1\123\1\124\1\0\1\125\1\126"+
    "\1\127\1\130\1\131\13\33\1\132\1\33\1\133\1\33"+
    "\1\134\14\33\1\135\3\0\1\50\3\0\1\60\1\136"+
    "\3\33\1\137\1\140\4\33\1\141\1\142\11\33\1\143"+
    "\4\33\1\144\2\33\1\145\1\33\1\0\1\146\1\147"+
    "\2\33\1\150\1\33\1\151\3\33\1\152\13\33\1\153"+
    "\1\154\1\155\1\0\7\33\1\156\1\157\1\160\3\33"+
    "\1\161\1\162\1\163\2\33\1\164\2\33\1\165\1\33"+
    "\1\166\1\167\1\33\1\170\2\33\1\171\1\172\3\33"+
    "\1\173\1\33\1\174\1\175\1\33\1\176";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u0228\0\u0228\0\u0228\0\u033c"+
    "\0\u0381\0\u0228\0\u0228\0\u0228\0\u03c6\0\u040b\0\u0228\0\u0450"+
    "\0\u0495\0\u04da\0\u051f\0\u0564\0\u0228\0\u0228\0\u05a9\0\u05ee"+
    "\0\u0633\0\u0228\0\u0228\0\u0678\0\u0228\0\u0228\0\u0228\0\u0228"+
    "\0\u06bd\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0"+
    "\0\u08e5\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8"+
    "\0\u0b0d\0\u0228\0\u0b52\0\u0228\0\u0b97\0\u0bdc\0\u0228\0\u0c21"+
    "\0\u0c66\0\u0228\0\u0cab\0\u0228\0\u0cf0\0\u0d35\0\u0d7a\0\u0dbf"+
    "\0\u0228\0\u0e04\0\u0228\0\u0228\0\u0e49\0\u0e8e\0\u0228\0\u0ed3"+
    "\0\u0f18\0\u0228\0\u0228\0\u0f5d\0\u0228\0\u0fa2\0\u0228\0\u0fe7"+
    "\0\u0228\0\u102c\0\u0228\0\u0228\0\u1071\0\u0228\0\u0228\0\u10b6"+
    "\0\u0228\0\u10fb\0\u1140\0\u0228\0\u1185\0\u11ca\0\u0228\0\u120f"+
    "\0\u1254\0\u0228\0\u0228\0\u0228\0\u1299\0\u06bd\0\u0228\0\u12de"+
    "\0\u1323\0\u1368\0\u13ad\0\u13f2\0\u1437\0\u147c\0\u0678\0\u14c1"+
    "\0\u1506\0\u154b\0\u1590\0\u15d5\0\u0678\0\u161a\0\u0678\0\u165f"+
    "\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd\0\u1842\0\u1887"+
    "\0\u18cc\0\u1911\0\u1956\0\u199b\0\u0228\0\u19e0\0\u0228\0\u0228"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u1bc3\0\u0228"+
    "\0\u0228\0\u0228\0\u1c08\0\u1c4d\0\u1c92\0\u0228\0\u0228\0\u0228"+
    "\0\u0228\0\u0228\0\u0228\0\u0228\0\u1cd7\0\u1185\0\u11ca\0\u1d1c"+
    "\0\u0228\0\u0228\0\u1d61\0\u1da6\0\u1deb\0\u1e30\0\u1e75\0\u1eba"+
    "\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u0678"+
    "\0\u20e2\0\u0678\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b\0\u2280"+
    "\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u241e\0\u0228\0\u2463"+
    "\0\u24a8\0\u24ed\0\u0228\0\u2532\0\u2577\0\u25bc\0\u2601\0\u10fb"+
    "\0\u2646\0\u268b\0\u26d0\0\u0678\0\u0678\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u0678\0\u0678\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u293d"+
    "\0\u2982\0\u29c7\0\u2a0c\0\u2a51\0\u0678\0\u2a96\0\u2adb\0\u2b20"+
    "\0\u2b65\0\u0678\0\u2baa\0\u2bef\0\u0678\0\u2c34\0\u2c79\0\u1b7e"+
    "\0\u1bc3\0\u2cbe\0\u2d03\0\u0678\0\u2d48\0\u0678\0\u2d8d\0\u2dd2"+
    "\0\u2e17\0\u0678\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u310e\0\u0678\0\u0678\0\u0678"+
    "\0\u3153\0\u3198\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336"+
    "\0\u0678\0\u0678\0\u0678\0\u337b\0\u33c0\0\u3405\0\u0678\0\u0678"+
    "\0\u0678\0\u344a\0\u348f\0\u0678\0\u34d4\0\u3519\0\u0678\0\u355e"+
    "\0\u0678\0\u0678\0\u35a3\0\u0678\0\u35e8\0\u362d\0\u0678\0\u0678"+
    "\0\u3672\0\u36b7\0\u36fc\0\u0678\0\u3741\0\u0678\0\u0678\0\u3786"+
    "\0\u0678";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\3\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\4\44\1\45\1\46"+
    "\1\47\1\50\1\44\1\51\1\52\1\53\1\54\1\55"+
    "\1\56\1\57\2\44\1\60\3\44\1\61\1\62\1\63"+
    "\1\64\1\65\1\66\1\67\1\70\1\44\1\71\2\44"+
    "\1\72\1\73\1\74\1\75\2\76\1\11\1\76\1\11"+
    "\1\76\1\77\35\76\1\100\40\76\2\101\1\11\1\101"+
    "\1\11\6\101\1\102\30\101\1\103\40\101\1\104\1\105"+
    "\1\106\1\104\1\106\6\104\1\107\7\104\1\110\61\104"+
    "\1\11\1\105\1\111\1\11\1\111\16\11\1\112\61\11"+
    "\2\113\1\114\13\113\1\115\4\113\1\116\61\113\22\117"+
    "\1\120\15\117\1\121\14\117\1\121\3\117\3\122\21\117"+
    "\24\123\4\124\55\123\106\0\1\12\1\0\1\12\103\0"+
    "\1\13\1\0\1\13\133\0\1\125\62\0\1\126\21\0"+
    "\1\127\63\0\1\130\20\0\1\131\50\0\1\132\33\0"+
    "\1\133\104\0\1\134\72\0\1\135\11\0\1\136\1\137"+
    "\72\0\1\140\1\0\4\124\5\0\1\141\65\0\1\142"+
    "\4\0\1\143\7\0\1\144\75\0\4\34\17\0\1\34"+
    "\2\0\1\145\5\0\1\146\3\147\3\0\1\150\7\0"+
    "\1\146\31\0\4\34\17\0\1\34\11\0\3\147\53\0"+
    "\1\151\1\152\104\0\1\153\104\0\1\154\1\155\74\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\30\44\4\0"+
    "\50\156\1\157\34\156\24\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\23\44\1\160\4\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\10\44\1\161\7\44\1\162"+
    "\7\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\1\163\15\44\1\164\11\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\4\44\1\165\3\44\1\166\5\44"+
    "\1\167\10\44\1\170\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\13\44\1\171\1\44\1\172\12\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\1\173\15\44"+
    "\1\174\11\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\5\44\1\175\6\44\1\176\1\177\12\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\1\200\27\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\10\44"+
    "\1\201\5\44\1\202\11\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\20\44\1\203\7\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\1\204\17\44\1\205"+
    "\7\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\4\44\1\206\23\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\22\44\1\207\2\44\1\210\2\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\20\44\1\211"+
    "\7\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\15\44\1\212\3\44\1\213\6\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\7\44\1\214\20\44\37\0"+
    "\1\215\46\0\1\216\35\0\1\217\51\0\2\76\1\0"+
    "\1\76\1\0\1\76\1\0\35\76\1\0\40\76\6\0"+
    "\1\220\15\0\3\221\13\0\1\222\1\0\1\220\4\0"+
    "\2\220\2\0\2\220\7\0\1\220\2\0\1\220\1\0"+
    "\1\220\1\223\1\220\1\0\1\224\5\0\2\101\1\0"+
    "\1\101\1\0\6\101\1\0\30\101\1\0\40\101\13\0"+
    "\1\220\30\0\1\220\41\0\1\105\105\0\1\106\1\0"+
    "\1\106\131\0\1\225\71\0\1\226\4\0\1\143\77\0"+
    "\1\227\4\0\1\143\104\0\1\230\77\0\1\231\110\0"+
    "\1\232\101\0\1\233\1\0\1\233\2\0\4\234\101\0"+
    "\4\124\10\0\1\235\6\0\1\124\5\0\1\235\3\0"+
    "\3\236\54\0\1\237\104\0\1\240\104\0\1\241\72\0"+
    "\1\242\115\0\1\243\1\244\51\0\16\142\1\245\66\142"+
    "\2\143\1\0\1\143\1\0\100\143\24\0\2\246\21\0"+
    "\1\246\61\0\4\247\7\0\2\247\6\0\1\247\1\0"+
    "\6\247\52\0\3\250\111\0\1\251\104\0\1\252\75\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\22\44\1\253"+
    "\5\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\22\44\1\254\5\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\4\44\1\255\23\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\21\44\1\256\6\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\15\44\1\257"+
    "\12\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\5\44\1\260\22\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\21\44\1\261\6\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\15\44\1\262\12\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\21\44\1\263"+
    "\6\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\23\44\1\264\4\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\13\44\1\265\14\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\20\44\1\266\7\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\17\44\1\267"+
    "\10\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\17\44\1\270\2\44\1\271\5\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\13\44\1\272\14\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\22\44\1\273"+
    "\5\44\30\0\4\44\7\0\4\44\4\0\1\274\1\0"+
    "\30\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\2\44\1\275\25\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\16\44\1\276\11\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\22\44\1\277\5\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\20\44\1\300"+
    "\7\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\10\44\1\301\17\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\1\302\22\44\1\303\4\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\10\44\1\304\17\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\10\44"+
    "\1\305\17\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\4\44\1\306\23\44\37\0\1\307\75\0\3\220"+
    "\102\0\4\310\7\0\2\310\10\0\6\310\52\0\4\311"+
    "\7\0\2\311\10\0\6\311\52\0\4\312\7\0\2\312"+
    "\10\0\6\312\41\0\1\313\71\0\16\226\1\314\66\226"+
    "\2\227\1\0\1\227\1\0\11\227\1\315\66\227\24\0"+
    "\4\234\101\0\4\234\17\0\1\234\54\0\1\316\1\0"+
    "\1\316\2\0\4\317\55\0\16\142\1\245\4\142\1\320"+
    "\61\142\24\0\3\250\20\0\1\250\61\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\16\44\1\321\11\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\322\1\0\30\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\1\323\27\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\4\44"+
    "\1\324\15\44\1\325\5\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\22\44\1\326\5\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\4\44\1\327\23\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\22\44"+
    "\1\330\5\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\1\331\27\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\4\44\1\332\23\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\14\44\1\333\13\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\13\44\1\334"+
    "\5\44\1\335\6\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\4\44\1\336\23\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\16\44\1\337\11\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\20\44\1\340"+
    "\7\44\30\0\4\44\7\0\4\44\4\0\1\341\1\0"+
    "\30\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\4\44\1\342\13\44\1\343\7\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\12\44\1\344\15\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\2\44\1\345"+
    "\25\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\23\44\1\346\4\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\23\44\1\347\4\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\22\44\1\350\5\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\15\44\1\351"+
    "\12\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\4\44\1\352\23\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\16\44\1\353\11\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\15\44\1\354\12\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\15\44\1\355"+
    "\2\44\1\356\7\44\30\0\4\357\7\0\2\357\10\0"+
    "\6\357\52\0\4\224\7\0\2\224\10\0\6\224\52\0"+
    "\4\220\7\0\2\220\10\0\6\220\26\0\16\226\1\314"+
    "\4\226\1\360\61\226\2\227\1\0\1\227\1\0\11\227"+
    "\1\315\4\227\1\361\61\227\24\0\4\317\101\0\4\317"+
    "\17\0\1\317\11\0\3\236\45\0\4\44\7\0\4\44"+
    "\4\0\1\362\1\0\30\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\21\44\1\363\6\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\12\44\1\364\15\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\10\44"+
    "\1\365\17\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\20\44\1\366\7\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\10\44\1\367\17\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\14\44\1\370\13\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\22\44"+
    "\1\371\5\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\4\44\1\372\23\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\10\44\1\373\17\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\20\44\1\374\7\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\10\44"+
    "\1\375\17\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\10\44\1\376\17\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\13\44\1\377\14\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\4\44\1\u0100\23\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\1\u0101"+
    "\27\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\20\44\1\u0102\7\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\2\44\1\u0103\25\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\2\44\1\u0104\25\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\21\44\1\u0105"+
    "\6\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\15\44\1\u0106\12\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\6\44\1\u0107\21\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\4\44\1\u0108\23\44\30\0"+
    "\4\u0109\7\0\2\u0109\10\0\6\u0109\52\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\2\44\1\u010a\25\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\4\44\1\u010b"+
    "\23\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\15\44\1\u010c\12\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\15\44\1\u010d\12\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\10\44\1\u010e\17\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\7\44\1\u010f"+
    "\20\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\6\44\1\u0110\21\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\22\44\1\u0111\5\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\26\44\1\u0112\1\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\15\44\1\u0113"+
    "\12\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\21\44\1\u0114\6\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\22\44\1\u0115\5\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\6\44\1\u0116\21\44\30\0"+
    "\4\44\7\0\4\44\4\0\1\44\1\0\15\44\1\u0117"+
    "\12\44\30\0\4\44\7\0\4\44\4\0\1\44\1\0"+
    "\22\44\1\u0118\5\44\30\0\4\44\7\0\4\44\4\0"+
    "\1\44\1\0\7\44\1\u0119\20\44\30\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\14\44\1\u011a\13\44\30\0"+
    "\4\223\7\0\2\223\10\0\6\223\52\0\4\44\7\0"+
    "\4\44\4\0\1\44\1\0\1\u011b\27\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\22\44\1\u011c\5\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\23\44"+
    "\1\u011d\4\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\2\44\1\u011e\25\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\2\44\1\u011f\25\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\20\44\1\u0120\7\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\15\44"+
    "\1\u0121\12\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\4\44\1\u0122\23\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\23\44\1\u0123\4\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\4\44\1\u0124\23\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\23\44"+
    "\1\u0125\4\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\21\44\1\u0126\6\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\4\44\1\u0127\23\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\22\44\1\u0128\5\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\16\44"+
    "\1\u0129\11\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\20\44\1\u012a\7\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\22\44\1\u012b\5\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\22\44\1\u012c\5\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\23\44"+
    "\1\u012d\4\44\30\0\4\44\7\0\4\44\4\0\1\44"+
    "\1\0\15\44\1\u012e\12\44\30\0\4\44\7\0\4\44"+
    "\4\0\1\44\1\0\4\44\1\u012f\23\44\30\0\4\44"+
    "\7\0\4\44\4\0\1\44\1\0\6\44\1\u0130\21\44"+
    "\30\0\4\44\7\0\4\44\4\0\1\44\1\0\7\44"+
    "\1\u0131\20\44\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14283];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\10\0\1\11\3\1\3\11\2\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\2\11\1\1\4\11\21\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\1\1\1\11"+
    "\4\1\1\11\1\1\2\11\2\1\1\11\2\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\2\11"+
    "\1\0\2\11\1\1\1\11\1\0\1\1\1\11\2\0"+
    "\1\11\1\0\1\1\3\11\1\1\1\0\1\11\35\1"+
    "\1\11\1\1\2\11\7\0\3\11\1\0\1\1\1\0"+
    "\7\11\1\0\3\1\2\11\34\1\1\11\3\0\1\11"+
    "\3\0\40\1\1\0\31\1\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  int commentNestingDepth = 0;
  boolean newLineSeen = false;
  boolean endOfStatement = false;

  public OdinLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OdinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 127: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 128: break;
          case 3:
            { return NEW_LINE;
            }
          // fall through
          case 129: break;
          case 4:
            { yybegin(NLSEMI_STATE); return NOT;
            }
          // fall through
          case 130: break;
          case 5:
            { yybegin(DQ_STRING_STATE);
            }
          // fall through
          case 131: break;
          case 6:
            { return HASH;
            }
          // fall through
          case 132: break;
          case 7:
            { return DOLLAR;
            }
          // fall through
          case 133: break;
          case 8:
            { return MOD;
            }
          // fall through
          case 134: break;
          case 9:
            { return AND;
            }
          // fall through
          case 135: break;
          case 10:
            { yybegin(SQ_STRING_STATE);
            }
          // fall through
          case 136: break;
          case 11:
            { return LPAREN;
            }
          // fall through
          case 137: break;
          case 12:
            { yybegin(NLSEMI_STATE); return RPAREN;
            }
          // fall through
          case 138: break;
          case 13:
            { return STAR;
            }
          // fall through
          case 139: break;
          case 14:
            { return PLUS;
            }
          // fall through
          case 140: break;
          case 15:
            { return COMMA;
            }
          // fall through
          case 141: break;
          case 16:
            { return MINUS;
            }
          // fall through
          case 142: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 143: break;
          case 18:
            { return DIV;
            }
          // fall through
          case 144: break;
          case 19:
            { yybegin(INTEGER_LITERAL_STATE);
            }
          // fall through
          case 145: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 146: break;
          case 21:
            { return SEMICOLON;
            }
          // fall through
          case 147: break;
          case 22:
            { return LT;
            }
          // fall through
          case 148: break;
          case 23:
            { return EQ;
            }
          // fall through
          case 149: break;
          case 24:
            { return GT;
            }
          // fall through
          case 150: break;
          case 25:
            { return QUESTION;
            }
          // fall through
          case 151: break;
          case 26:
            { return AT;
            }
          // fall through
          case 152: break;
          case 27:
            { yybegin(NLSEMI_STATE); return IDENTIFIER;
            }
          // fall through
          case 153: break;
          case 28:
            { return LBRACKET;
            }
          // fall through
          case 154: break;
          case 29:
            { yybegin(NEXT_LINE);
            }
          // fall through
          case 155: break;
          case 30:
            { yybegin(NLSEMI_STATE); return RBRACKET;
            }
          // fall through
          case 156: break;
          case 31:
            { yybegin(NLSEMI_STATE); return CARET;
            }
          // fall through
          case 157: break;
          case 32:
            { return LBRACE;
            }
          // fall through
          case 158: break;
          case 33:
            { return PIPE;
            }
          // fall through
          case 159: break;
          case 34:
            { yybegin(NLSEMI_STATE); return RBRACE;
            }
          // fall through
          case 160: break;
          case 35:
            { return TILDE;
            }
          // fall through
          case 161: break;
          case 36:
            { 
            }
          // fall through
          case 162: break;
          case 37:
            { yybegin(NLSEMI_STATE); return DQ_STRING_LITERAL;
            }
          // fall through
          case 163: break;
          case 38:
            { yybegin(NLSEMI_STATE); return SQ_STRING_LITERAL;
            }
          // fall through
          case 164: break;
          case 39:
            { yypushback(1); yybegin(YYINITIAL);
            }
          // fall through
          case 165: break;
          case 40:
            { yybegin(YYINITIAL); return EOS_TOKEN;
            }
          // fall through
          case 166: break;
          case 41:
            { yybegin(YYINITIAL);
            }
          // fall through
          case 167: break;
          case 42:
            { if(yytext().charAt(0) == '\n') newLineSeen = true;
            }
          // fall through
          case 168: break;
          case 43:
            { newLineSeen = true;
            }
          // fall through
          case 169: break;
          case 44:
            { yybegin(NLSEMI_STATE); yypushback(1); return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 170: break;
          case 45:
            { yybegin(FLOAT_LITERAL_STATE);
            }
          // fall through
          case 171: break;
          case 46:
            { yybegin(NLSEMI_STATE); return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 172: break;
          case 47:
            { yybegin(NLSEMI_STATE); yypushback(1); return FLOAT_DEC_LITERAL;
            }
          // fall through
          case 173: break;
          case 48:
            { yybegin(NLSEMI_STATE); return FLOAT_DEC_LITERAL;
            }
          // fall through
          case 174: break;
          case 49:
            { return NEQ;
            }
          // fall through
          case 175: break;
          case 50:
            { return REMAINDER;
            }
          // fall through
          case 176: break;
          case 51:
            { return MOD_EQ;
            }
          // fall through
          case 177: break;
          case 52:
            { return ANDAND;
            }
          // fall through
          case 178: break;
          case 53:
            { return AND_EQ;
            }
          // fall through
          case 179: break;
          case 54:
            { return ANDNOT;
            }
          // fall through
          case 180: break;
          case 55:
            { return STAR_EQ;
            }
          // fall through
          case 181: break;
          case 56:
            { return PLUS_EQ;
            }
          // fall through
          case 182: break;
          case 57:
            { return MINUS_EQ;
            }
          // fall through
          case 183: break;
          case 58:
            { return ARROW;
            }
          // fall through
          case 184: break;
          case 59:
            { return RANGE;
            }
          // fall through
          case 185: break;
          case 60:
            { yybegin(NLSEMI_STATE); return DOT_QUESTION;
            }
          // fall through
          case 186: break;
          case 61:
            { return LINE_COMMENT;
            }
          // fall through
          case 187: break;
          case 62:
            { return DIV_EQ;
            }
          // fall through
          case 188: break;
          case 63:
            { yybegin(NLSEMI_STATE); return COMPLEX_INTEGER_DEC_LITERAL;
            }
          // fall through
          case 189: break;
          case 64:
            { return LSHIFT;
            }
          // fall through
          case 190: break;
          case 65:
            { return LTE;
            }
          // fall through
          case 191: break;
          case 66:
            { return EQEQ;
            }
          // fall through
          case 192: break;
          case 67:
            { return GTE;
            }
          // fall through
          case 193: break;
          case 68:
            { return RSHIFT;
            }
          // fall through
          case 194: break;
          case 69:
            { yybegin(NLSEMI_STATE); return RAW_STRING_LITERAL;
            }
          // fall through
          case 195: break;
          case 70:
            { return DO;
            }
          // fall through
          case 196: break;
          case 71:
            { return IF;
            }
          // fall through
          case 197: break;
          case 72:
            { return IN;
            }
          // fall through
          case 198: break;
          case 73:
            { return OR_EQ;
            }
          // fall through
          case 199: break;
          case 74:
            { return OROR;
            }
          // fall through
          case 200: break;
          case 75:
            { return XOR_EQ;
            }
          // fall through
          case 201: break;
          case 76:
            { commentNestingDepth--;
          if (commentNestingDepth <= 0) {
              if(endOfStatement && newLineSeen) {
                  endOfStatement = false;
                  newLineSeen = false;
                  yybegin(YYINITIAL);
                  return EOS_BLOCK_COMMENT;
              } else if(endOfStatement) {
                  endOfStatement = false;
                  newLineSeen = false;
                  yybegin(NLSEMI_STATE);
                  return BLOCK_COMMENT;
              } else {
                  endOfStatement = false;
                  newLineSeen = false;
                  yybegin(YYINITIAL);
                  return BLOCK_COMMENT;
              }
          }
            }
          // fall through
          case 202: break;
          case 77:
            { commentNestingDepth++;
            }
          // fall through
          case 203: break;
          case 78:
            { yybegin(NLSEMI_STATE); yypushback(2); return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 204: break;
          case 79:
            { return REMAINDER_EQ;
            }
          // fall through
          case 205: break;
          case 80:
            { return ANDAND_EQ;
            }
          // fall through
          case 206: break;
          case 81:
            { return BITWISE_AND_NOT_EQ;
            }
          // fall through
          case 207: break;
          case 82:
            { yybegin(NLSEMI_STATE); return TRIPLE_DASH;
            }
          // fall through
          case 208: break;
          case 83:
            { return RANGE_EXCLUSIVE;
            }
          // fall through
          case 209: break;
          case 84:
            { return RANGE_INCLUSIVE;
            }
          // fall through
          case 210: break;
          case 85:
            { yybegin(NLSEMI_STATE); return INTEGER_BIN_LITERAL;
            }
          // fall through
          case 211: break;
          case 86:
            { yybegin(NLSEMI_STATE); return INTEGER_HEX_LITERAL;
            }
          // fall through
          case 212: break;
          case 87:
            { yybegin(NLSEMI_STATE); return INTEGER_OCT_LITERAL;
            }
          // fall through
          case 213: break;
          case 88:
            { return LSHIFT_EQ;
            }
          // fall through
          case 214: break;
          case 89:
            { return RSHIFT_EQ;
            }
          // fall through
          case 215: break;
          case 90:
            { return FOR;
            }
          // fall through
          case 216: break;
          case 91:
            { return MAP;
            }
          // fall through
          case 217: break;
          case 92:
            { yybegin(NLSEMI_STATE); return NIL;
            }
          // fall through
          case 218: break;
          case 93:
            { return OROR_EQ;
            }
          // fall through
          case 219: break;
          case 94:
            { endOfStatement = false; newLineSeen = false; yypushback(yylength()-2); commentNestingDepth=1; yybegin(BLOCK_COMMENT_STATE);
            }
          // fall through
          case 220: break;
          case 95:
            { return CASE;
            }
          // fall through
          case 221: break;
          case 96:
            { return CAST;
            }
          // fall through
          case 222: break;
          case 97:
            { return ELSE;
            }
          // fall through
          case 223: break;
          case 98:
            { return ENUM;
            }
          // fall through
          case 224: break;
          case 99:
            { return PROC;
            }
          // fall through
          case 225: break;
          case 100:
            { yybegin(NLSEMI_STATE); return TRUE;
            }
          // fall through
          case 226: break;
          case 101:
            { return WHEN;
            }
          // fall through
          case 227: break;
          case 102:
            { endOfStatement = true; newLineSeen = false; commentNestingDepth=1; yypushback(yylength()-2); yybegin(BLOCK_COMMENT_STATE);
            }
          // fall through
          case 228: break;
          case 103:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 229: break;
          case 104:
            { yybegin(NLSEMI_STATE); return BREAK;
            }
          // fall through
          case 230: break;
          case 105:
            { return DEFER;
            }
          // fall through
          case 231: break;
          case 106:
            { yybegin(NLSEMI_STATE); return FALSE;
            }
          // fall through
          case 232: break;
          case 107:
            { return UNION;
            }
          // fall through
          case 233: break;
          case 108:
            { return USING;
            }
          // fall through
          case 234: break;
          case 109:
            { return WHERE;
            }
          // fall through
          case 235: break;
          case 110:
            { return IMPORT;
            }
          // fall through
          case 236: break;
          case 111:
            { return MATRIX;
            }
          // fall through
          case 237: break;
          case 112:
            { return NOT_IN;
            }
          // fall through
          case 238: break;
          case 113:
            { yybegin(NLSEMI_STATE); return RETURN;
            }
          // fall through
          case 239: break;
          case 114:
            { return STRUCT;
            }
          // fall through
          case 240: break;
          case 115:
            { return SWITCH;
            }
          // fall through
          case 241: break;
          case 116:
            { return BIT_SET;
            }
          // fall through
          case 242: break;
          case 117:
            { return DYNAMIC;
            }
          // fall through
          case 243: break;
          case 118:
            { return FOREIGN;
            }
          // fall through
          case 244: break;
          case 119:
            { return OR_ELSE;
            }
          // fall through
          case 245: break;
          case 120:
            { return PACKAGE;
            }
          // fall through
          case 246: break;
          case 121:
            { yybegin(NLSEMI_STATE); return CONTINUE;
            }
          // fall through
          case 247: break;
          case 122:
            { return DISTINCT;
            }
          // fall through
          case 248: break;
          case 123:
            { return AUTO_CAST;
            }
          // fall through
          case 249: break;
          case 124:
            { yybegin(NLSEMI_STATE); return OR_RETURN;
            }
          // fall through
          case 250: break;
          case 125:
            { return TRANSMUTE;
            }
          // fall through
          case 251: break;
          case 126:
            { yybegin(NLSEMI_STATE); return FALLTHROUGH;
            }
          // fall through
          case 252: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
