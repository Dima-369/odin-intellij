// Generated by JFlex 1.9.1 http://jflex.de/  (tweaked for IntelliJ platform)
// source: Odin.flex

package com.lasagnerd.odin.lang;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;import com.lasagnerd.odin.lang.psi.OdinTokenType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.lasagnerd.odin.lang.psi.OdinTypes.*;


public class OdinLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int DQ_STRING_STATE = 2;
  public static final int SQ_STRING_STATE = 4;
  public static final int NLSEMI_STATE = 6;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3, 3
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\4\1\2\22\0\1\1"+
    "\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24"+
    "\1\25\6\26\2\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\4\37\1\40\1\37\16\41\1\42\5\41"+
    "\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52"+
    "\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62"+
    "\1\63\1\64\1\65\1\66\1\67\1\70\1\41\1\71"+
    "\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\41"+
    "\1\101\1\102\1\103\1\104\6\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\2\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\1"+
    "\20\33\1\37\1\40\1\41\1\42\1\43\1\44\2\43"+
    "\1\45\1\43\1\46\1\2\1\47\3\46\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\1\0\1\60"+
    "\1\61\1\62\1\63\1\0\1\64\1\65\3\0\1\66"+
    "\2\0\1\67\1\70\1\71\1\72\1\73\1\0\1\74"+
    "\7\33\1\75\5\33\1\76\1\33\1\77\15\33\1\100"+
    "\1\101\1\102\1\43\10\0\1\103\1\104\1\105\1\106"+
    "\1\107\1\0\1\110\1\0\1\110\1\111\1\112\1\113"+
    "\1\114\1\115\13\33\1\116\1\33\1\117\1\33\1\120"+
    "\14\33\1\121\3\0\1\47\1\122\1\0\1\122\1\123"+
    "\3\33\1\124\1\125\4\33\1\126\1\127\11\33\1\130"+
    "\4\33\1\131\2\33\1\132\1\33\1\0\1\47\2\33"+
    "\1\133\1\33\1\134\3\33\1\135\13\33\1\136\1\137"+
    "\1\140\1\0\7\33\1\141\1\142\1\143\3\33\1\144"+
    "\1\145\1\146\2\33\1\147\2\33\1\150\1\33\1\151"+
    "\1\152\1\33\1\153\2\33\1\154\1\155\3\33\1\156"+
    "\1\33\1\157\1\160\1\33\1\161";

  private static int [] zzUnpackAction() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\212\0\317\0\u0114\0\u0159\0\u019e\0\u01e3"+
    "\0\u0114\0\u0114\0\u0114\0\u0228\0\u026d\0\u0114\0\u0114\0\u0114"+
    "\0\u02b2\0\u02f7\0\u0114\0\u033c\0\u0381\0\u03c6\0\u040b\0\u0450"+
    "\0\u0114\0\u0114\0\u0495\0\u04da\0\u051f\0\u0114\0\u0114\0\u0564"+
    "\0\u0114\0\u0114\0\u0114\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd"+
    "\0\u0702\0\u0747\0\u078c\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5"+
    "\0\u092a\0\u096f\0\u09b4\0\u09f9\0\u0114\0\u0a3e\0\u0114\0\u0a83"+
    "\0\u0ac8\0\u0114\0\u0b0d\0\u0b52\0\u0114\0\u0b97\0\u0114\0\u0bdc"+
    "\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0114\0\u0d35\0\u0114\0\u0d7a"+
    "\0\u0114\0\u0114\0\u0114\0\u0114\0\u0dbf\0\u0114\0\u0114\0\u0e04"+
    "\0\u0114\0\u0e49\0\u0e8e\0\u0114\0\u0ed3\0\u0f18\0\u0f5d\0\u0114"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u0114\0\u0114\0\u0114\0\u1071\0\u05a9"+
    "\0\u0114\0\u10b6\0\u10fb\0\u1140\0\u1185\0\u11ca\0\u120f\0\u1254"+
    "\0\u0564\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad\0\u0564\0\u13f2"+
    "\0\u0564\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u0114\0\u17b8"+
    "\0\u0114\0\u0114\0\u17fd\0\u1842\0\u1887\0\u18cc\0\u1911\0\u0cab"+
    "\0\u1956\0\u199b\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\u19e0"+
    "\0\u1a25\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u1b7e\0\u0114\0\u0114"+
    "\0\u1bc3\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6"+
    "\0\u1deb\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u0564\0\u1f44\0\u0564"+
    "\0\u1f89\0\u1fce\0\u2013\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c"+
    "\0\u21b1\0\u21f6\0\u223b\0\u2280\0\u0114\0\u22c5\0\u230a\0\u234f"+
    "\0\u0114\0\u0cab\0\u2394\0\u0114\0\u0114\0\u23d9\0\u241e\0\u2463"+
    "\0\u0564\0\u0564\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u0564\0\u0564"+
    "\0\u25bc\0\u2601\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f"+
    "\0\u27e4\0\u0564\0\u2829\0\u286e\0\u28b3\0\u28f8\0\u0564\0\u293d"+
    "\0\u2982\0\u0564\0\u29c7\0\u2a0c\0\u199b\0\u2a51\0\u2a96\0\u0564"+
    "\0\u2adb\0\u0564\0\u2b20\0\u2b65\0\u2baa\0\u0564\0\u2bef\0\u2c34"+
    "\0\u2c79\0\u2cbe\0\u2d03\0\u2d48\0\u2d8d\0\u2dd2\0\u2e17\0\u2e5c"+
    "\0\u2ea1\0\u0564\0\u0564\0\u0564\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\u0564\0\u0564\0\u0564\0\u310e"+
    "\0\u3153\0\u3198\0\u0564\0\u0564\0\u0564\0\u31dd\0\u3222\0\u0564"+
    "\0\u3267\0\u32ac\0\u0564\0\u32f1\0\u0564\0\u0564\0\u3336\0\u0564"+
    "\0\u337b\0\u33c0\0\u0564\0\u0564\0\u3405\0\u344a\0\u348f\0\u0564"+
    "\0\u34d4\0\u0564\0\u0564\0\u3519\0\u0564";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\1\6\1\7\1\5\1\6\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\3\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\4\40\1\41\1\5"+
    "\1\42\1\43\1\40\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\2\40\1\53\3\40\1\54\1\55\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\40\1\64\2\40"+
    "\1\65\1\66\1\67\1\70\2\71\1\5\3\71\1\72"+
    "\35\71\1\73\40\71\2\74\1\5\10\74\1\75\30\74"+
    "\1\76\40\74\1\77\1\100\1\101\10\77\1\102\2\77"+
    "\1\103\4\77\1\104\61\77\106\0\1\6\2\0\1\6"+
    "\102\0\1\7\135\0\1\105\62\0\1\106\21\0\1\107"+
    "\63\0\1\110\20\0\1\111\50\0\1\112\33\0\1\113"+
    "\104\0\1\114\72\0\1\115\11\0\1\116\1\117\72\0"+
    "\1\120\12\0\1\121\65\0\1\122\4\0\1\123\7\0"+
    "\1\124\73\0\1\125\1\0\4\30\10\0\1\126\6\0"+
    "\1\30\2\0\1\127\2\0\1\126\3\0\3\130\3\0"+
    "\1\131\7\0\1\132\27\0\1\125\1\0\4\30\10\0"+
    "\1\126\6\0\1\30\5\0\1\126\3\0\3\130\53\0"+
    "\1\133\1\134\104\0\1\135\104\0\1\136\1\137\74\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\30\40\4\0"+
    "\50\140\1\141\34\140\24\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\23\40\1\142\4\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\10\40\1\143\7\40\1\144"+
    "\7\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\1\145\15\40\1\146\11\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\4\40\1\147\3\40\1\150\5\40"+
    "\1\151\10\40\1\152\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\13\40\1\153\1\40\1\154\12\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\1\155\15\40"+
    "\1\156\11\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\5\40\1\157\6\40\1\160\1\161\12\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\1\162\27\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\10\40"+
    "\1\163\5\40\1\164\11\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\20\40\1\165\7\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\1\166\17\40\1\167"+
    "\7\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\4\40\1\170\23\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\22\40\1\171\2\40\1\172\2\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\20\40\1\173"+
    "\7\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\15\40\1\174\3\40\1\175\6\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\7\40\1\176\20\40\37\0"+
    "\1\177\46\0\1\200\35\0\1\201\51\0\2\71\1\0"+
    "\3\71\1\0\35\71\1\0\40\71\6\0\1\202\15\0"+
    "\3\203\13\0\1\204\1\0\1\202\4\0\2\202\2\0"+
    "\2\202\7\0\1\202\2\0\1\202\1\0\1\202\1\205"+
    "\1\202\1\0\1\206\5\0\2\74\1\0\10\74\1\0"+
    "\30\74\1\0\40\74\13\0\1\202\30\0\1\202\41\0"+
    "\1\100\105\0\1\101\133\0\1\207\53\0\2\210\1\0"+
    "\13\210\1\211\66\210\16\0\1\212\4\0\1\123\114\0"+
    "\1\213\104\0\1\214\72\0\1\215\115\0\1\216\1\217"+
    "\51\0\16\122\1\220\66\122\2\123\1\0\102\123\24\0"+
    "\4\221\74\0\1\222\1\0\1\222\2\0\4\223\101\0"+
    "\2\224\103\0\3\225\102\0\4\226\7\0\2\226\10\0"+
    "\6\226\61\0\1\227\104\0\1\230\75\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\22\40\1\231\5\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\22\40\1\232"+
    "\5\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\4\40\1\233\23\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\21\40\1\234\6\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\15\40\1\235\12\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\5\40\1\236"+
    "\22\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\21\40\1\237\6\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\15\40\1\240\12\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\21\40\1\241\6\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\23\40\1\242"+
    "\4\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\13\40\1\243\14\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\20\40\1\244\7\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\17\40\1\245\10\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\17\40\1\246"+
    "\2\40\1\247\5\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\13\40\1\250\14\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\22\40\1\251\5\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\252\1\0\30\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\2\40\1\253"+
    "\25\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\16\40\1\254\11\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\22\40\1\255\5\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\20\40\1\256\7\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\10\40\1\257"+
    "\17\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\1\260\22\40\1\261\4\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\10\40\1\262\17\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\10\40\1\263\17\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\4\40"+
    "\1\264\23\40\37\0\1\265\75\0\3\202\102\0\4\266"+
    "\7\0\2\266\10\0\6\266\52\0\4\267\7\0\2\267"+
    "\10\0\6\267\52\0\4\270\7\0\2\270\10\0\6\270"+
    "\41\0\1\271\71\0\2\210\1\0\13\210\1\211\4\210"+
    "\1\272\61\210\2\212\3\0\11\212\1\273\66\212\23\122"+
    "\1\274\61\122\24\0\4\221\10\0\1\126\6\0\1\221"+
    "\5\0\1\126\3\0\3\275\45\0\4\223\101\0\4\223"+
    "\17\0\1\223\11\0\3\275\45\0\2\224\21\0\1\224"+
    "\61\0\3\225\20\0\1\225\61\0\4\226\7\0\2\226"+
    "\6\0\1\226\1\0\6\226\52\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\16\40\1\276\11\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\277\1\0\30\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\1\300\27\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\4\40\1\301"+
    "\15\40\1\302\5\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\22\40\1\303\5\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\304\23\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\22\40\1\305"+
    "\5\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\1\306\27\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\4\40\1\307\23\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\14\40\1\310\13\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\13\40\1\311\5\40"+
    "\1\312\6\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\4\40\1\313\23\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\16\40\1\314\11\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\20\40\1\315\7\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\316\1\0\30\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\4\40"+
    "\1\317\13\40\1\320\7\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\12\40\1\321\15\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\2\40\1\322\25\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\23\40"+
    "\1\323\4\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\23\40\1\324\4\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\22\40\1\325\5\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\15\40\1\326\12\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\4\40"+
    "\1\327\23\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\16\40\1\330\11\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\15\40\1\331\12\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\15\40\1\332\2\40"+
    "\1\333\7\40\30\0\4\334\7\0\2\334\10\0\6\334"+
    "\52\0\4\206\7\0\2\206\10\0\6\206\52\0\4\202"+
    "\7\0\2\202\10\0\6\202\26\0\2\212\3\0\11\212"+
    "\1\273\4\212\1\335\61\212\24\0\4\40\7\0\4\40"+
    "\4\0\1\336\1\0\30\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\21\40\1\337\6\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\12\40\1\340\15\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\10\40"+
    "\1\341\17\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\20\40\1\342\7\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\10\40\1\343\17\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\14\40\1\344\13\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\22\40"+
    "\1\345\5\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\4\40\1\346\23\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\10\40\1\347\17\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\20\40\1\350\7\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\10\40"+
    "\1\351\17\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\10\40\1\352\17\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\13\40\1\353\14\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\4\40\1\354\23\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\1\355"+
    "\27\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\20\40\1\356\7\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\2\40\1\357\25\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\2\40\1\360\25\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\21\40\1\361"+
    "\6\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\15\40\1\362\12\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\6\40\1\363\21\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\4\40\1\364\23\40\30\0"+
    "\4\365\7\0\2\365\10\0\6\365\52\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\2\40\1\366\25\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\4\40\1\367"+
    "\23\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\15\40\1\370\12\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\15\40\1\371\12\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\10\40\1\372\17\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\7\40\1\373"+
    "\20\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\6\40\1\374\21\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\22\40\1\375\5\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\26\40\1\376\1\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\15\40\1\377"+
    "\12\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\21\40\1\u0100\6\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\22\40\1\u0101\5\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\6\40\1\u0102\21\40\30\0"+
    "\4\40\7\0\4\40\4\0\1\40\1\0\15\40\1\u0103"+
    "\12\40\30\0\4\40\7\0\4\40\4\0\1\40\1\0"+
    "\22\40\1\u0104\5\40\30\0\4\40\7\0\4\40\4\0"+
    "\1\40\1\0\7\40\1\u0105\20\40\30\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\14\40\1\u0106\13\40\30\0"+
    "\4\205\7\0\2\205\10\0\6\205\52\0\4\40\7\0"+
    "\4\40\4\0\1\40\1\0\1\u0107\27\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\22\40\1\u0108\5\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\23\40"+
    "\1\u0109\4\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\2\40\1\u010a\25\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\2\40\1\u010b\25\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\20\40\1\u010c\7\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\15\40"+
    "\1\u010d\12\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\4\40\1\u010e\23\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\23\40\1\u010f\4\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\4\40\1\u0110\23\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\23\40"+
    "\1\u0111\4\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\21\40\1\u0112\6\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\4\40\1\u0113\23\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\22\40\1\u0114\5\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\16\40"+
    "\1\u0115\11\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\20\40\1\u0116\7\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\22\40\1\u0117\5\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\22\40\1\u0118\5\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\23\40"+
    "\1\u0119\4\40\30\0\4\40\7\0\4\40\4\0\1\40"+
    "\1\0\15\40\1\u011a\12\40\30\0\4\40\7\0\4\40"+
    "\4\0\1\40\1\0\4\40\1\u011b\23\40\30\0\4\40"+
    "\7\0\4\40\4\0\1\40\1\0\6\40\1\u011c\21\40"+
    "\30\0\4\40\7\0\4\40\4\0\1\40\1\0\7\40"+
    "\1\u011d\20\40\4\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[13662];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\3\1\3\11\2\1\3\11\2\1\1\11"+
    "\5\1\2\11\3\1\2\11\1\1\3\11\21\1\1\11"+
    "\1\1\1\11\2\1\1\11\2\1\1\11\1\1\1\11"+
    "\5\1\1\11\1\1\1\11\1\1\4\11\1\0\2\11"+
    "\1\1\1\11\1\0\1\1\1\11\3\0\1\11\2\0"+
    "\1\1\3\11\1\1\1\0\1\11\35\1\1\11\1\1"+
    "\2\11\10\0\5\11\1\0\1\1\1\0\4\1\2\11"+
    "\34\1\1\11\3\0\1\11\1\1\1\0\2\11\36\1"+
    "\1\0\30\1\1\0\50\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[285];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public OdinLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public OdinLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 114: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 115: break;
          case 3:
            { return NEW_LINE;
            }
          // fall through
          case 116: break;
          case 4:
            { return NOT;
            }
          // fall through
          case 117: break;
          case 5:
            { yybegin(DQ_STRING_STATE);
            }
          // fall through
          case 118: break;
          case 6:
            { return HASH;
            }
          // fall through
          case 119: break;
          case 7:
            { return DOLLAR;
            }
          // fall through
          case 120: break;
          case 8:
            { return MOD;
            }
          // fall through
          case 121: break;
          case 9:
            { return AND;
            }
          // fall through
          case 122: break;
          case 10:
            { yybegin(SQ_STRING_STATE);
            }
          // fall through
          case 123: break;
          case 11:
            { return LPAREN;
            }
          // fall through
          case 124: break;
          case 12:
            { yybegin(NLSEMI_STATE); return RPAREN;
            }
          // fall through
          case 125: break;
          case 13:
            { return STAR;
            }
          // fall through
          case 126: break;
          case 14:
            { return PLUS;
            }
          // fall through
          case 127: break;
          case 15:
            { return COMMA;
            }
          // fall through
          case 128: break;
          case 16:
            { return MINUS;
            }
          // fall through
          case 129: break;
          case 17:
            { return DOT;
            }
          // fall through
          case 130: break;
          case 18:
            { return DIV;
            }
          // fall through
          case 131: break;
          case 19:
            { yybegin(NLSEMI_STATE); return INTEGER_DEC_LITERAL;
            }
          // fall through
          case 132: break;
          case 20:
            { return COLON;
            }
          // fall through
          case 133: break;
          case 21:
            { return SEMICOLON;
            }
          // fall through
          case 134: break;
          case 22:
            { return LT;
            }
          // fall through
          case 135: break;
          case 23:
            { return EQ;
            }
          // fall through
          case 136: break;
          case 24:
            { return GT;
            }
          // fall through
          case 137: break;
          case 25:
            { return QUESTION;
            }
          // fall through
          case 138: break;
          case 26:
            { return AT;
            }
          // fall through
          case 139: break;
          case 27:
            { yybegin(NLSEMI_STATE); return IDENTIFIER;
            }
          // fall through
          case 140: break;
          case 28:
            { return LBRACKET;
            }
          // fall through
          case 141: break;
          case 29:
            { yybegin(NLSEMI_STATE); return RBRACKET;
            }
          // fall through
          case 142: break;
          case 30:
            { yybegin(NLSEMI_STATE); return CARET;
            }
          // fall through
          case 143: break;
          case 31:
            { return LBRACE;
            }
          // fall through
          case 144: break;
          case 32:
            { return PIPE;
            }
          // fall through
          case 145: break;
          case 33:
            { yybegin(NLSEMI_STATE); return RBRACE;
            }
          // fall through
          case 146: break;
          case 34:
            { return TILDE;
            }
          // fall through
          case 147: break;
          case 35:
            { 
            }
          // fall through
          case 148: break;
          case 36:
            { yybegin(NLSEMI_STATE); return DQ_STRING_LITERAL;
            }
          // fall through
          case 149: break;
          case 37:
            { yybegin(NLSEMI_STATE); return SQ_STRING_LITERAL;
            }
          // fall through
          case 150: break;
          case 38:
            { yypushback(1); yybegin(YYINITIAL);
            }
          // fall through
          case 151: break;
          case 39:
            { yybegin(YYINITIAL); return EOS;
            }
          // fall through
          case 152: break;
          case 40:
            { return NEQ;
            }
          // fall through
          case 153: break;
          case 41:
            { return REMAINDER;
            }
          // fall through
          case 154: break;
          case 42:
            { return MOD_EQ;
            }
          // fall through
          case 155: break;
          case 43:
            { return ANDAND;
            }
          // fall through
          case 156: break;
          case 44:
            { return AND_EQ;
            }
          // fall through
          case 157: break;
          case 45:
            { return ANDNOT;
            }
          // fall through
          case 158: break;
          case 46:
            { return STAR_EQ;
            }
          // fall through
          case 159: break;
          case 47:
            { return PLUS_EQ;
            }
          // fall through
          case 160: break;
          case 48:
            { return MINUS_EQ;
            }
          // fall through
          case 161: break;
          case 49:
            { return ARROW;
            }
          // fall through
          case 162: break;
          case 50:
            { return RANGE;
            }
          // fall through
          case 163: break;
          case 51:
            { yybegin(NLSEMI_STATE); return DOT_QUESTION;
            }
          // fall through
          case 164: break;
          case 52:
            { return LINE_COMMENT;
            }
          // fall through
          case 165: break;
          case 53:
            { return DIV_EQ;
            }
          // fall through
          case 166: break;
          case 54:
            { yybegin(NLSEMI_STATE); return COMPLEX_INTEGER_DEC_LITERAL;
            }
          // fall through
          case 167: break;
          case 55:
            { return LSHIFT;
            }
          // fall through
          case 168: break;
          case 56:
            { return LTE;
            }
          // fall through
          case 169: break;
          case 57:
            { return EQEQ;
            }
          // fall through
          case 170: break;
          case 58:
            { return GTE;
            }
          // fall through
          case 171: break;
          case 59:
            { return RSHIFT;
            }
          // fall through
          case 172: break;
          case 60:
            { yybegin(NLSEMI_STATE); return RAW_STRING_LITERAL;
            }
          // fall through
          case 173: break;
          case 61:
            { return DO;
            }
          // fall through
          case 174: break;
          case 62:
            { return IF;
            }
          // fall through
          case 175: break;
          case 63:
            { return IN;
            }
          // fall through
          case 176: break;
          case 64:
            { return OR_EQ;
            }
          // fall through
          case 177: break;
          case 65:
            { return OROR;
            }
          // fall through
          case 178: break;
          case 66:
            { return XOR_EQ;
            }
          // fall through
          case 179: break;
          case 67:
            { return REMAINDER_EQ;
            }
          // fall through
          case 180: break;
          case 68:
            { return ANDAND_EQ;
            }
          // fall through
          case 181: break;
          case 69:
            { yybegin(NLSEMI_STATE); return TRIPLE_DASH;
            }
          // fall through
          case 182: break;
          case 70:
            { return RANGE_EXCLUSIVE;
            }
          // fall through
          case 183: break;
          case 71:
            { return RANGE_INCLUSIVE;
            }
          // fall through
          case 184: break;
          case 72:
            { yybegin(NLSEMI_STATE); return FLOAT_DEC_LITERAL;
            }
          // fall through
          case 185: break;
          case 73:
            { yybegin(NLSEMI_STATE); return INTEGER_BIN_LITERAL;
            }
          // fall through
          case 186: break;
          case 74:
            { yybegin(NLSEMI_STATE); return INTEGER_OCT_LITERAL;
            }
          // fall through
          case 187: break;
          case 75:
            { yybegin(NLSEMI_STATE); return INTEGER_HEX_LITERAL;
            }
          // fall through
          case 188: break;
          case 76:
            { return LSHIFT_EQ;
            }
          // fall through
          case 189: break;
          case 77:
            { return RSHIFT_EQ;
            }
          // fall through
          case 190: break;
          case 78:
            { return FOR;
            }
          // fall through
          case 191: break;
          case 79:
            { return MAP;
            }
          // fall through
          case 192: break;
          case 80:
            { yybegin(NLSEMI_STATE); return NIL;
            }
          // fall through
          case 193: break;
          case 81:
            { return OROR_EQ;
            }
          // fall through
          case 194: break;
          case 82:
            { return BLOCK_COMMENT;
            }
          // fall through
          case 195: break;
          case 83:
            { yybegin(NLSEMI_STATE); return COMPLEX_FLOAT_LITERAL;
            }
          // fall through
          case 196: break;
          case 84:
            { return CASE;
            }
          // fall through
          case 197: break;
          case 85:
            { return CAST;
            }
          // fall through
          case 198: break;
          case 86:
            { return ELSE;
            }
          // fall through
          case 199: break;
          case 87:
            { return ENUM;
            }
          // fall through
          case 200: break;
          case 88:
            { return PROC;
            }
          // fall through
          case 201: break;
          case 89:
            { yybegin(NLSEMI_STATE); return TRUE;
            }
          // fall through
          case 202: break;
          case 90:
            { return WHEN;
            }
          // fall through
          case 203: break;
          case 91:
            { yybegin(NLSEMI_STATE); return BREAK;
            }
          // fall through
          case 204: break;
          case 92:
            { return DEFER;
            }
          // fall through
          case 205: break;
          case 93:
            { yybegin(NLSEMI_STATE); return FALSE;
            }
          // fall through
          case 206: break;
          case 94:
            { return UNION;
            }
          // fall through
          case 207: break;
          case 95:
            { return USING;
            }
          // fall through
          case 208: break;
          case 96:
            { return WHERE;
            }
          // fall through
          case 209: break;
          case 97:
            { return IMPORT;
            }
          // fall through
          case 210: break;
          case 98:
            { return MATRIX;
            }
          // fall through
          case 211: break;
          case 99:
            { return NOT_IN;
            }
          // fall through
          case 212: break;
          case 100:
            { yybegin(NLSEMI_STATE); return RETURN;
            }
          // fall through
          case 213: break;
          case 101:
            { return STRUCT;
            }
          // fall through
          case 214: break;
          case 102:
            { return SWITCH;
            }
          // fall through
          case 215: break;
          case 103:
            { return BIT_SET;
            }
          // fall through
          case 216: break;
          case 104:
            { return DYNAMIC;
            }
          // fall through
          case 217: break;
          case 105:
            { return FOREIGN;
            }
          // fall through
          case 218: break;
          case 106:
            { return OR_ELSE;
            }
          // fall through
          case 219: break;
          case 107:
            { return PACKAGE;
            }
          // fall through
          case 220: break;
          case 108:
            { yybegin(NLSEMI_STATE); return CONTINUE;
            }
          // fall through
          case 221: break;
          case 109:
            { return DISTINCT;
            }
          // fall through
          case 222: break;
          case 110:
            { return AUTO_CAST;
            }
          // fall through
          case 223: break;
          case 111:
            { yybegin(NLSEMI_STATE); return OR_RETURN;
            }
          // fall through
          case 224: break;
          case 112:
            { return TRANSMUTE;
            }
          // fall through
          case 225: break;
          case 113:
            { yybegin(NLSEMI_STATE); return FALLTHROUGH;
            }
          // fall through
          case 226: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
